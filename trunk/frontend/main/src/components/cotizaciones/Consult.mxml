<?xml version="1.0" encoding="ISO-8859-1"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
		 label="Consulta"
		 horizontalAlign="right"
		 creationComplete="creationCompleteHandler(event)" xmlns:components="components.*">
	<mx:Script>
		<![CDATA[
			import mx.events.ListEvent;
			import events.GenericEvent;
			
			import model.Cotizacion;
			import model.Util;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			private var items:ArrayCollection = null;
			
			private var cotizacion:Cotizacion;
			
			[Bindable]
			private var _readOnly:Boolean = true;
			
			[Bindable]
			private var _noExecuteQuery:Boolean = false;
			
			public function set readOnly(value:Boolean):void{
				this._readOnly = value;
			}
			
			public function set noExecuteQuery(value:Boolean):void{
				this._noExecuteQuery = value;
			}
			
			protected function responseGetAll_resultHandler(event:ResultEvent):void
			{
				items = event.result as ArrayCollection;
			}
			
			protected function cotizacionService_faultHandler(event:FaultEvent):void
			{
				Util.showErrorMessage( Util.splitException( event.fault.faultString ) );
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				if( !this._noExecuteQuery ){
					this.executeQuery();
				}
				if( this._readOnly ){
					this.currentState = "readOnly";
				}
			}
			
			protected function datagrid_doubleClickHandler(event:MouseEvent):void
			{
				var item:Cotizacion = this.datagrid.selectedItem as Cotizacion;
				if( item == null ){
					return;
				}
				this.responseGetItem.token = this.cotizacionService.getItem( item.id );
			}
			
			protected function responseGetItem_resultHandler(event:ResultEvent):void
			{
				var item:Cotizacion = event.result as Cotizacion;
				if( item == null ){
					return;
				}
				var genericEvent:GenericEvent = new GenericEvent("quoteDetail");
				genericEvent.information = item;
				this.dispatchEvent( genericEvent );
			}
			
			public function executeQuery():void
			{
				this.responseGetAll.token = this.cotizacionService.getAll();
			}
			
			protected function btnDelete_clickHandler(event:MouseEvent):void
			{
				if( this.datagrid.selectedItems == null ||
					this.datagrid.selectedItems.length == 0 ){
					Util.showErrorMessage("Debe seleccionar elementos de la tabla.");
					return;
				}
				Alert.show("Confirme si desea eliminar los elementos.","Advertencia",Alert.YES+Alert.NO,this, deleteItems);
			}
			
			private function deleteItems(event:CloseEvent):void
			{
				if( event.detail == Alert.NO ){
					return;
				}
				var items:ArrayCollection = Util.selectedIDs( this.datagrid.selectedItems ); 
				this.responseDeleteItems.token = this.cotizacionService.deleteItems( items );
			}
			
			protected function responseDeleteItems_resultHandler(event:ResultEvent):void
			{
				this.executeQuery();
			}
			
			private function labelFunctionGenerico(item:Object, column:DataGridColumn):String{
				return Util.extractToText( item, column.dataField );
			}
			
			private function labelFunctionDate(object:Object, column:DataGridColumn):String{
				return Util.formatDateToString( object[column.dataField] );
			}
			
			public function setDataGridData(datas:ArrayCollection):void
			{
				this.items = datas;
			}
			
			public function setDataAndSelected( data:ArrayCollection, selected:Boolean=true ):void{
				if( data == null ){
					return;
				}
				this.setDataGridData( data );
				if( selected ){
					this.datagrid.selectedIndex = 0;
					this.datagrid.dispatchEvent( new ListEvent(ListEvent.CHANGE) );
					this.datagrid.dispatchEvent( new MouseEvent(MouseEvent.DOUBLE_CLICK) );
				}
			}
			
			public function selectedQuote():Cotizacion{
				return this.datagrid.selectedItem as Cotizacion;
			}
			
			public function deselect():void{
				this.datagrid.selectedIndex = -1;
			}
			
			public function cleanList():void{
				Util.cleanList( this.datagrid );
			}
		]]>
	</mx:Script>
	<mx:Metadata>
		[Event(name="quoteDetail", type="events.GenericEvent")]
	</mx:Metadata>
	<mx:states>
		<mx:State name="readOnly">
			<mx:RemoveChild target="{this.hBoxButtonsBar}"/>
		</mx:State>
	</mx:states>
	<mx:HBox width="{Util.getGrandParentWidthLess(this)}" height="100%">
	<mx:DataGrid id="datagrid" width="700" height="100%" dataProvider="{items}"
				 doubleClickEnabled="true" doubleClick="datagrid_doubleClickHandler(event)"
				 allowMultipleSelection="true">
		<mx:columns>
			<mx:DataGridColumn id="dtgID" headerText="ID"
							   dataField="id"
							   width="60"
							   textAlign="right"/>
			<mx:DataGridColumn id="dtgDescription" headerText="Descripción"
							   width="260"
							   dataField="descripcion"
							   />
			<mx:DataGridColumn id="dtgTransmitter" headerText="Emisor"
							   dataField="emisor"
							   width="120"/>
			<mx:DataGridColumn id="dtgDate" headerText="Fecha"
							   dataField="fecha"
							   width="60"
							   textAlign="center"
							   labelFunction="labelFunctionDate"/>
			<mx:DataGridColumn headerText="Nombre Archivo"
							   dataField="nombreArchivo"
							   width="200"/>			
		</mx:columns>
	</mx:DataGrid>
	</mx:HBox>
	<mx:HBox id="hBoxButtonsBar">
		<mx:Button id="btnDelete" label="Eliminar" click="btnDelete_clickHandler(event)"
			visible="{!this._readOnly}"/>
		<components:ExportButton datagrid="{this.datagrid}"
			visible="{!this._readOnly}"/>
	</mx:HBox>
	<mx:RemoteObject id="cotizacionService" destination="cotizacionService" fault="cotizacionService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:CallResponder id="responseGetAll" result="responseGetAll_resultHandler(event)"/>
	<mx:CallResponder id="responseGetItem" result="responseGetItem_resultHandler(event)"/>
	<mx:CallResponder id="responseDeleteItems" result="responseDeleteItems_resultHandler(event)"/>
</mx:VBox>
