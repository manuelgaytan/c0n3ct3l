<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:components="components.*"
		 creationComplete="creationCompleteHandler(event)" xmlns:proyectos="components.proyectos.*"
		 >
	<mx:Script>
		<![CDATA[
			import events.GenericEvent;
			
			import model.Catalogo;
			import model.Constants;
			import model.Estado;
			import model.EstadoOrdenCompra;
			import model.EstadoValidacionCosto;
			import model.EstadoValidacionOperativa;
			import model.FiltroProyecto;
			import model.OrdenCompraCliente;
			import model.Producto;
			import model.Proyecto;
			import model.TipoEntregable;
			import model.Util;
			
			import mx.collections.ArrayCollection;
			import mx.com.gahm.componentes.validadores.InicializaValidadoresEtiquetas;
			import mx.com.gahm.componentes.validadores.ValidadorAlfabetico;
			import mx.com.gahm.componentes.validadores.ValidadorAlfanumerico;
			import mx.com.gahm.componentes.validadores.ValidadorEntero;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			private var mode:String = null;
			private var _item:OrdenCompraCliente;
			private var validators:InicializaValidadoresEtiquetas;
			
			public function set registrer(value:Boolean):void{
				mode = Constants.REGISTER_MODE;
				this.label = Constants.REGISTRAR;
			}
			
			public function set update(value:Boolean):void{
				mode = Constants.UPDATE_MODE;
				this.label = Constants.MODIFICAR;
			}
			
			public function set enabledComponents(value:Boolean):void{
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.modeValidation();
				this.initializeValidators();
				this.fillCombos();
			}
			
			public function set clientPurchaseOrder(value:OrdenCompraCliente):void{
				if( value == null ){
					return;
				}
				this._item = value;
				this.setItem(); 
			}
			
			private function setItem():void
			{
				if( this._item == null ){
					return;
				}
				this.txtID.text = this._item.id.toString();
				this.projectsConsult.datagrid = Util.asArrayCollection( this._item.proyecto );
				this.chbPurchaseOrder.selected = this._item.ordenCompra;
				this.txtPurchaseOrderNumber.text = this._item.numeroOrdenCompra;
				this.dtfPurchaseOrderDate.selectedDate = this._item.fecha;
				this.txtPurchaseOrderCost.text = this._item.costoOrdenCompra.toString();
				this.setCommercialCost(this._item.proyecto);
				if( Util.isFill( this.cmbCostValidationStatus ) && this._item.estadoValidacionCosto != null ){
					this.cmbCostValidationStatus.selectedIndex = Util.selectedIndexFromCombo( this.cmbCostValidationStatus.dataProvider as ArrayCollection, 
						this._item.estadoValidacionCosto.id);
				}
				this.commentsCostValidation.setCommentsIn( this._item.comentariosEstadoValidacionCosto, "");
				if( Util.isFill( this.cmbPurchaseOrderStatus ) && this._item.estadoOrdenCompra != null ){
					this.cmbPurchaseOrderStatus.selectedIndex = Util.selectedIndexFromCombo( this.cmbPurchaseOrderStatus.dataProvider as ArrayCollection, 
						this._item.estadoOrdenCompra.id);
				}
				this.commentsCostValidation.setCommentsIn( this._item.comentariosEstadoValidacionCosto, "");
			}
			
			private function getClientPurchaseOrder():OrdenCompraCliente{
				var clientPurchaseOrder:OrdenCompraCliente = null;
				if( this.mode == Constants.REGISTER_MODE ){
					clientPurchaseOrder = new OrdenCompraCliente();
				}else{
					clientPurchaseOrder = this._item;
				}
				clientPurchaseOrder.proyecto = this.projectsConsult.datagrid.selectedItem as Proyecto;
				clientPurchaseOrder.ordenCompra = this.chbPurchaseOrder.selected;
				clientPurchaseOrder.numeroOrdenCompra = Util.validateEmpty( this.txtPurchaseOrderNumber.text );
				clientPurchaseOrder.fecha = this.dtfPurchaseOrderDate.selectedDate;
				clientPurchaseOrder.costoOrdenCompra = Util.stringToNumber( this.txtPurchaseOrderCost.text );
				clientPurchaseOrder.estadoValidacionCosto = Util.validateCombo( this.cmbCostValidationStatus ) as EstadoValidacionCosto;
				clientPurchaseOrder.comentariosEstadoValidacionCosto = this.commentsCostValidation.getCommentsAsInWith("","","");
				clientPurchaseOrder.estadoOrdenCompra = Util.validateCombo( this.cmbPurchaseOrderStatus ) as EstadoOrdenCompra;
				clientPurchaseOrder.comentariosEstadoOrdenCompra = this.commentsPurchaseOrderStatus.getCommentsAsInWith("","","");
				return clientPurchaseOrder;
			}
			
			private function fillCombos():void
			{
				this.responseGetEstadoOrdenCompra.token = this.catalogoService.getEstadoValidacionOperativa();
			}
			
			
			protected function datosGeneralesOrdenCompraClienteService_faultHandler(event:FaultEvent):void
			{
				Util.showErrorMessage( Util.splitException( event.fault.faultString ) );
			}
			
			protected function btnAccept_clickHandler(event:MouseEvent):void
			{
				if( !this.validations() ){
					Util.showMessageVerifyFields();
					return;
				}
				if( this.mode == Constants.UPDATE_MODE ){
					Alert.show("Confirme si desea actualizar el elemento.","Advertencia",Alert.YES+Alert.NO,this, updateItem);
				}
			}
			
			private function updateItem(event:CloseEvent):void{
				if( event.detail == Alert.NO ){
					return;
				}
				var item:OrdenCompraCliente = this.getClientPurchaseOrder();
				Util.showProperties( item );
				this.responseUpdate.token = this.ordenenCompraClienteService.update( item );
			}
			
			private function validations():Boolean
			{
				var value:Boolean = true;
				value &&= this.validators.validarFormulario();
				value &&= this.projectsConsult.datagrid.selectedItem != null;
				return value;
			}
			
			private function modeValidation():void
			{
				if( this.mode == Constants.REGISTER_MODE ){
					form.removeChild( this.frmID );
					this.executeProjectQuery();
				}
				if( this.mode == Constants.UPDATE_MODE ){
				}
			}
			
			private function initializeValidators():void
			{
				this.validators = new InicializaValidadoresEtiquetas();
			}
			
			protected function responseSave_resultHandler(event:ResultEvent):void
			{
				var eventGeneralDataProjectNew:Event = new Event("clientPurchaseOrderNew");
				this.dispatchEvent( eventGeneralDataProjectNew );
				this.cleanForm();
			}
			
			private function cleanForm():void
			{
				this.txtID.reset();
				Util.removeItems(this.projectsConsult.datagrid.dataProvider);
				this,chbPurchaseOrder.selected = false;
				this.txtPurchaseOrderNumber.reset();
				this.dtfPurchaseOrderDate.reset();
				this.txtPurchaseOrderCost.reset();
				this.txtCommercialCost.reset();
				this.cmbCostValidationStatus.selectedIndex = 0;
				this.commentsCostValidation.reset();
				this.cmbPurchaseOrderStatus.selectedIndex = 0;
				this.commentsPurchaseOrderStatus.reset();
			}
			
			protected function responseUpdate_resultHandler(event:ResultEvent):void
			{
				var eventGeneralDataProjectUpdated:Event = new Event("clientPurchaseOrderUpdated");
				this.dispatchEvent( eventGeneralDataProjectUpdated );
				this.cleanForm();
			}
			
			protected function responseGetEstadoOrdenCompra_resultHandler(event:ResultEvent):void
			{
				var data:ArrayCollection = event.result as ArrayCollection;
				if( data == null ){
					return;
				}
				this.cmbPurchaseOrderStatus.dataProvider = data;
				if( Util.isFill( this.cmbPurchaseOrderStatus ) && this._item 
					&& this._item.estadoOrdenCompra != null ){
					this.cmbPurchaseOrderStatus.selectedIndex = Util.selectedIndexFromCombo( this.cmbPurchaseOrderStatus.dataProvider as ArrayCollection, 
						this._item.estadoOrdenCompra.id);
				}
			}
			
			protected function responseGetEstadoValidacionCosto_resultHandler(event:ResultEvent):void
			{
				var data:ArrayCollection = event.result as ArrayCollection;
				if( data == null ){
					return;
				}
				this.cmbCostValidationStatus.dataProvider = data;
				if( Util.isFill( this.cmbCostValidationStatus ) && this._item 
					&& this._item.estadoValidacionCosto != null ){
					this.cmbCostValidationStatus.selectedIndex = Util.selectedIndexFromCombo( this.cmbCostValidationStatus.dataProvider as ArrayCollection, 
						this._item.estadoValidacionCosto.id);
				}
			}
			
			private function executeProjectQuery():void
			{
				var filter:FiltroProyecto = new FiltroProyecto();
				filter.idConectel = null;
				filter.idCategoria = undefined;
				filter.idCliente = undefined;
				filter.tipoProyecto = undefined;
				filter.tecnologia = undefined;
				filter.equipo = undefined;
				filter.actividadRealizar = undefined;
				filter.modelo = undefined;
				filter.descripcionServicio = undefined;
				filter.tipoServicio = undefined;
				this.responseGetAllByFiltro.token = this.proyectoService.getAllByFiltro(filter);
			}
			
			protected function responseGetAll_resultHandler(event:ResultEvent):void
			{
				projectsConsult.setDataGridData( event.result as ArrayCollection );
			}
			
			protected function projectsConsult_projectSelectedHandler(event:GenericEvent):void
			{
				var project:Proyecto = event.information as Proyecto;
			}
			
			private function setCommercialCost(project:Proyecto):void{
				if( project.producto.tipoServicio == Producto.TIPO_SERVICIO_LOCAL ){
					this.txtCommercialCost.text = Util.currencyFormatter.format(project.producto.costoLocalCliente);
				}
				if( project.producto.tipoServicio == Producto.TIPO_SERVICIO_FORANEO ){
					this.txtCommercialCost.text = Util.currencyFormatter.format(project.producto.costoForaneoCliente);
				}
			}
			
			protected function responseGetValidacionCosto_resultHandler(event:ResultEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
		]]>
	</mx:Script>
	<mx:Metadata>
		[Event(name="clientPurchaseOrderNew", type="flash.events.Event")]
		[Event(name="clientPurchaseOrderUpdated", type="flash.events.Event")]
		[Event(name="clientPurchaseOrderProjectDone", type="flash.events.Event")]
	</mx:Metadata>
	<mx:Form id="form">
		<mx:FormItem id="frmID" label="ID:" direction="horizontal">
			<components:TextInput id="txtID" width="80" textAlign="right"
								  editable="false"/>
		</mx:FormItem>
		<mx:FormHeading label="Datos de Orden de Compra del Cliente"/>
		<proyectos:Consult id="projectsConsult" projectSelected="projectsConsult_projectSelectedHandler(event)"/>
		<mx:FormItem label="Orden de Compra:">
			<mx:CheckBox id="chbPurchaseOrder"/>
		</mx:FormItem>
		<mx:FormItem label="Número de Orden de Compra:">
			<components:TextInput id="txtPurchaseOrderNumber" width="90"
								  textAlign="right"/>
		</mx:FormItem>
		<mx:FormItem label="Fecha de Orden de Compra:">
			<components:DateField id="dtfPurchaseOrderDate"/>
		</mx:FormItem>
		<mx:FormHeading label="Validación del Costo"/>
		<mx:FormItem label="Costo de Orden Compra:">
			<components:TextInput id="txtPurchaseOrderCost" width="100"
								  textAlign="right"/>
		</mx:FormItem>
		<mx:FormItem label="Costo Comercial:">
			<components:TextInput id="txtCommercialCost" width="100"
								  editable="false"
								  textAlign="right"/>
		</mx:FormItem>
		<mx:FormItem label="Validación del Costo:">
			<mx:ComboBox id="cmbCostValidationStatus" width="200"
						 labelField="etiqueta"/>
		</mx:FormItem>
		<components:Comments id="commentsCostValidation"/>
		<mx:FormHeading label="Modificación de Estado de Orden de Compra"/>
		<mx:FormItem label="Estado de Orden de Compra">
			<mx:ComboBox id="cmbPurchaseOrderStatus" width="200"
						 labelField="etiqueta"/>
		</mx:FormItem>
		<components:Comments id="commentsPurchaseOrderStatus"/>
		<mx:FormItem direction="horizontal">
			<mx:Button id="btnAccept" label="Aceptar" click="btnAccept_clickHandler(event)"/>
		</mx:FormItem>
	</mx:Form>
	<mx:RemoteObject id="ordenenCompraClienteService" destination="ordenenCompraClienteService" fault="datosGeneralesOrdenCompraClienteService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:CallResponder id="responseUpdate" result="responseUpdate_resultHandler(event)"/>
	<mx:RemoteObject id="catalogoService" destination="catalogoService" fault="datosGeneralesOrdenCompraClienteService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:CallResponder id="responseGetEstadoOrdenCompra" result="responseGetEstadoOrdenCompra_resultHandler(event)"/>
	<mx:CallResponder id="responseGetValidacionCosto" result="responseGetValidacionCosto_resultHandler(event)"/>
	<mx:RemoteObject id="proyectoService" destination="proyectoService" fault="datosGeneralesOrdenCompraClienteService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:CallResponder id="responseGetAllByFiltro" result="responseGetAll_resultHandler(event)"/>
</mx:VBox>