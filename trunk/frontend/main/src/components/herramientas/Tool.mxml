<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:components="components.*"
		 creationComplete="creationCompleteHandler(event)"
		 >
	<mx:Script>
		<![CDATA[
			import model.Catalogo;
			import model.Colaborador;
			import model.Constants;
			import model.EstatusA;
			import model.GrupoFamiliaA;
			import model.Herramienta;
			import model.Perfil;
			import model.TipoAlmacen;
			import model.TipoMantenimiento;
			import model.UbicacionA;
			import model.UnidadA;
			import model.Util;
			
			import mx.collections.ArrayCollection;
			import mx.com.gahm.componentes.validadores.InicializaValidadoresEtiquetas;
			import mx.com.gahm.componentes.validadores.ValidadorAlfabetico;
			import mx.com.gahm.componentes.validadores.ValidadorAlfanumerico;
			import mx.com.gahm.componentes.validadores.ValidadorDecimal;
			import mx.com.gahm.componentes.validadores.ValidadorNumerico;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.object_proxy;
			
			private var mode:String = null;
			private var _item:Herramienta;
			private var validators:InicializaValidadoresEtiquetas;
			
			public function set registrer(value:Boolean):void{
				mode = Constants.REGISTER_MODE;
				this.label = Constants.REGISTRAR;
			}
			
			public function set update(value:Boolean):void{
				mode = Constants.UPDATE_MODE;
				this.label = Constants.MODIFICAR;
			}
			
			public function set enabledComponents(value:Boolean):void{
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.modeValidation();
				this.initializeValidators();
				this.fillCombos();
			}
			
			public function set tool(value:Herramienta):void{
				if( value == null ){
					return;
				}
				this._item = value;
				this.setTool(); 
			}
			
			private function setTool():void
			{
				if( this._item == null ){
					return;
				}
				this.txtCode.text = this._item.codigo;
				if( Util.isFill( this.cmbFamily ) && this._item.grupoFamiliaA != null ){
					this.cmbFamily.selectedIndex = Util.selectedIndexFromCombo( this.cmbFamily.dataProvider as ArrayCollection, 
					this._item.grupoFamiliaA.id);
				}
				this.txtDescription.text = this._item.descripcion;
				this.txtSerie.text = this._item.noSerie;
				this.txtTrade.text = this._item.marca;
				this.txtModel.text = this._item.modelo;
				this.dlvWarranty.delivers = this._item.polizaGarantia;
				this.dlvInsurance.delivers = this._item.polizaSeguro;
				this.txtExistence.text = Util.numberToString( this._item.existencia );
				if( Util.isFill( this.cmbUnit ) && this._item.unidadA != null ){
					this.cmbUnit.selectedIndex = Util.selectedIndexFromCombo( this.cmbUnit.dataProvider as ArrayCollection, 
						this._item.unidadA.id);
				}
				if( Util.isFill( this.cmbLocation ) && this._item.ubicacionA != null ){
					this.cmbLocation.selectedIndex = Util.selectedIndexFromCombo( this.cmbLocation.dataProvider as ArrayCollection, 
						this._item.ubicacionA.id);
				}
				if( Util.isFill( this.cmbResponsible ) && this._item.responsable != null ){
					this.cmbResponsible.selectedIndex = Util.selectedIndexFromCombo( this.cmbResponsible.dataProvider as ArrayCollection, 
						this._item.responsable.id);
				}
				if( Util.isFill( this.cmbStatus ) && this._item.estatusA != null ){
					this.cmbStatus.selectedIndex = Util.selectedIndexFromCombo( this.cmbStatus.dataProvider as ArrayCollection, 
						this._item.estatusA.id);
				}
				this.txtCertificateNumber.text = this._item.noCertificado;
				this.dtfCalibration.selectedDate = this._item.fechaCalibracion;
				this.dtfNextCalibration.selectedDate = this._item.fechaProximaCalibracion;
				this.dlvCalibrationCertificate.delivers = this._item.certificadoCalibracion;
				if( Util.isFill( this.cmbService ) && this._item.tipoMantenimiento != null ){
					this.cmbService.selectedIndex = Util.selectedIndexFromCombo( this.cmbService.dataProvider as ArrayCollection, 
						this._item.tipoMantenimiento.id);
				}
				this.dtfServiceDate.selectedDate = this._item.fechaMantenimiento;
				this.dlvServiceOrder.delivers = this._item.ordenMantenimiento;
				this.comments.comments = this._item.comentarios;
			}
			
			private function getTool():Herramienta{
				var item:Herramienta = null;
				if( this.mode == Constants.REGISTER_MODE ){
					item = new Herramienta();
				}else{
					item = this._item;
				}
				item.tipoAlmacen = TipoAlmacen.getHerramienta();
				item.fkTipoAlmacen = Util.extractId(item.tipoAlmacen);
				item.codigo = Util.validateEmpty( this.txtCode.text );
				item.grupoFamiliaA = Util.validateCombo( this.cmbFamily ) as GrupoFamiliaA;
				item.fkGrupoFamiliaA = Util.extractId(item.grupoFamiliaA);
				item.descripcion = Util.validateEmpty( this.txtDescription.text );
				item.noSerie = Util.validateEmpty( this.txtSerie.text );
				item.marca = Util.validateEmpty( this.txtTrade.text );
				item.modelo = Util.validateEmpty( this.txtModel.text );
				item.polizaGarantia = this.dlvWarranty.delivers;
				item.polizaSeguro = this.dlvInsurance.delivers;
				item.existencia = Util.stringToNumber( this.txtExistence.text );
				item.unidadA = Util.validateCombo( this.cmbUnit ) as UnidadA;
				item.fkUnidadA = Util.extractId(item.unidadA);
				item.ubicacionA = Util.validateCombo( this.cmbLocation ) as UbicacionA;
				item.fkUbicacionA = Util.extractId(item.ubicacionA);
				item.responsable = Util.validateCombo( this.cmbResponsible ) as Colaborador;
				item.fkResponsable = Util.extractId(item.responsable);
				item.estatusA = Util.validateCombo( this.cmbStatus ) as EstatusA;
				item.fkEstatusA = Util.extractId(item.estatusA);
				item.noCertificado = Util.validateEmpty( this.txtCertificateNumber.text );
				item.fechaCalibracion = this.dtfCalibration.selectedDate;
				item.fechaProximaCalibracion = this.dtfNextCalibration.selectedDate;
				item.certificadoCalibracion = this.dlvCalibrationCertificate.delivers;
				item.tipoMantenimiento = Util.validateCombo( this.cmbService ) as TipoMantenimiento;
				item.fkTipoMantenimiento = Util.extractId(item.tipoMantenimiento);
				item.fechaMantenimiento = this.dtfServiceDate.selectedDate;
				item.ordenMantenimiento = this.dlvServiceOrder.delivers;
				item.comentarios = this.comments.comments;
				return item;
			}
			
			private function fillCombos():void
			{
				this.responseGetGrupoFamiliaA.token = this.catalogoService.getGrupoFamiliaA();
				this.responseGetUnidadA.token = this.catalogoService.getUnidadA();
				this.responseGetUbicacionA.token = this.catalogoService.getUbicacionA();
				this.responseGetColaborador.token = this.catalogoService.getColaborador();
				this.responseGetEstatusA.token = this.catalogoService.getEstatusA();
				this.responseGetTipoMantenimiento.token = this.catalogoService.getTipoMantenimiento();
			}
			
			
			protected function responseGetGrupoFamiliaA_resultHandler(event:ResultEvent):void
			{
				var data:ArrayCollection = event.result as ArrayCollection;
				if( data == null ){
					return;
				}
				this.cmbFamily.dataProvider = Util.addEmptyCatalgo( data );
				if( this._item != null && this._item.grupoFamiliaA != null ){
					this.cmbFamily.selectedIndex = Util.selectedIndexFromCombo( this.cmbFamily.dataProvider as ArrayCollection, 
						this._item.grupoFamiliaA.id);
				}
			}
			
			protected function herramientaService_faultHandler(event:FaultEvent):void
			{
				Util.showErrorMessage( Util.splitException( event.fault.faultString ) );
			}
			
			protected function btnAccept_clickHandler(event:MouseEvent):void
			{
				if( !this.validations() ){
					Util.showMessageVerifyFields();
					return;
				}
				if( this.mode == Constants.REGISTER_MODE ){
					var tool:Herramienta = this.getTool();
					Util.showProperties( tool );
					this.responseSave.token = this.herramientaService.save( tool );
				}
				if( this.mode == Constants.UPDATE_MODE ){
					Alert.show("Confirme si desea actualizar el elemento.","Advertencia",Alert.YES+Alert.NO,this, updateItem);
				}
			}
			
			private function updateItem(event:CloseEvent):void{
				if( event.detail == Alert.NO ){
					return;
				}
				var tool:Herramienta = this.getTool();
				Util.showProperties( tool );
				this.responseUpdate.token = this.herramientaService.update( tool );
			}
			
			private function validations():Boolean
			{
				var value:Boolean = true;
				value &&= this.validators.validarFormulario();
				return value;
			}
			
			private function modeValidation():void
			{
			}
			
			private function initializeValidators():void
			{
				this.validators = new InicializaValidadoresEtiquetas();
				validators.crearValidadorRestrictor("generic",ValidadorAlfanumerico.nombre, 0, 255, true);
				validators.setRestrictor(txtCode, "generic");
				validators.setRestrictor(txtDescription, "generic");
				validators.setRestrictor(txtSerie, "generic");
				validators.setRestrictor(txtTrade, "generic");
				validators.setRestrictor(txtModel, "generic");
				validators.setRestrictor(txtCertificateNumber, "generic");
				validators.crearValidadorRestrictor("number",ValidadorDecimal.nombre, 10, 4);
				validators.setRestrictor(txtExistence, "number");
			}
			
			protected function responseSave_resultHandler(event:ResultEvent):void
			{
				var eventToolNew:Event = new Event("toolNew");
				this.dispatchEvent( eventToolNew );
				this.cleanForm();
			}
			
			private function cleanForm():void
			{
				this.txtCode.reset();
				this.cmbFamily.selectedIndex = 0;
				this.txtDescription.reset();
				this.txtSerie.reset();
				this.txtTrade.reset();
				this.txtModel.reset();
				this.dlvWarranty.reset();
				this.dlvInsurance.reset();
				this.txtExistence.reset();
				this.cmbUnit.selectedIndex = 0;
				this.cmbLocation.selectedIndex = 0;
				this.cmbResponsible.selectedIndex = 0;
				this.cmbStatus.selectedIndex = 0;
				this.txtCertificateNumber.reset();
				this.dtfCalibration.reset();
				this.dtfNextCalibration.reset();
				this.dlvCalibrationCertificate.reset();
				this.cmbService.selectedIndex = 0;
				this.dtfServiceDate.reset();
				this.dlvServiceOrder.reset();
				this.comments.reset();
			}
			
			protected function responseUpdate_resultHandler(event:ResultEvent):void
			{
				var eventToolUpdated:Event = new Event("toolUpdated");
				this.dispatchEvent( eventToolUpdated );
				this.cleanForm();
			}
			
			protected function responseGetUnidadA_resultHandler(event:ResultEvent):void
			{
				var data:ArrayCollection = event.result as ArrayCollection;
				if( data == null ){
					return;
				}
				this.cmbUnit.dataProvider = Util.addEmptyCatalgo( data );
				if( this._item != null && this._item.unidadA != null ){
					this.cmbUnit.selectedIndex = Util.selectedIndexFromCombo( this.cmbUnit.dataProvider as ArrayCollection, 
						this._item.unidadA.id);
				}
			}
			
			protected function responseGetUbicacionA_resultHandler(event:ResultEvent):void
			{
				var data:ArrayCollection = event.result as ArrayCollection;
				if( data == null ){
					return;
				}
				this.cmbLocation.dataProvider = Util.addEmptyCatalgo( data );
				if( this._item != null && this._item.ubicacionA != null ){
					this.cmbLocation.selectedIndex = Util.selectedIndexFromCombo( this.cmbLocation.dataProvider as ArrayCollection, 
						this._item.ubicacionA.id);
				}
			}
			
			protected function responseGetColaborador_resultHandler(event:ResultEvent):void
			{
				var data:ArrayCollection = event.result as ArrayCollection;
				if( data == null ){
					return;
				}
				this.cmbResponsible.dataProvider = Util.addEmptyCatalgo( data, "nombreCompleto" );
				if( this._item != null && this._item.responsable != null ){
					this.cmbResponsible.selectedIndex = Util.selectedIndexFromCombo( this.cmbResponsible.dataProvider as ArrayCollection, 
						this._item.responsable.id);
				}
			}
			
			protected function responseGetEstatusA_resultHandler(event:ResultEvent):void
			{
				var data:ArrayCollection = event.result as ArrayCollection;
				if( data == null ){
					return;
				}
				this.cmbStatus.dataProvider = Util.addEmptyCatalgo( data );
				if( this._item != null && this._item.estatusA != null ){
					this.cmbStatus.selectedIndex = Util.selectedIndexFromCombo( this.cmbStatus.dataProvider as ArrayCollection, 
						this._item.estatusA.id);
				}
			}
			
			protected function responseGetTipoMantenimiento_resultHandler(event:ResultEvent):void
			{
				var data:ArrayCollection = event.result as ArrayCollection;
				if( data == null ){
					return;
				}
				this.cmbService.dataProvider = Util.addEmptyCatalgo( data );
				if( this._item != null && this._item.tipoMantenimiento != null ){
					this.cmbService.selectedIndex = Util.selectedIndexFromCombo( this.cmbService.dataProvider as ArrayCollection, 
						this._item.tipoMantenimiento.id);
				}
			}
			
			protected function catalogoService_faultHandler(event:FaultEvent):void
			{
				Util.showErrorMessage( Util.splitException( event.fault.faultString ) );
			}
			
		]]>
	</mx:Script>
	<mx:Metadata>
		[Event(name="toolNew", type="flash.events.Event")]
		[Event(name="toolUpdated", type="flash.events.Event")]
	</mx:Metadata>
	<mx:Form id="form">
		<mx:FormItem label="Código:">
			<components:TextInput id="txtCode"/>
		</mx:FormItem>
		<mx:FormItem label="Grupo o Familia:">
			<mx:ComboBox id="cmbFamily"
						 labelField="etiqueta"
						 />
		</mx:FormItem>
		<mx:FormItem label="Descripción:">
			<components:TextInput id="txtDescription" width="400"/>
		</mx:FormItem>
		<mx:FormItem label="No. de Serie:">
			<components:TextInput id="txtSerie"
								  />
		</mx:FormItem>
		<mx:FormItem label="Marca:">
			<components:TextInput id="txtTrade"
								  />
		</mx:FormItem>
		<mx:FormItem label="Modelo:">
			<components:TextInput id="txtModel"/>
		</mx:FormItem>
		<mx:FormItem label="Poliza de Garantía:">
			<components:Deliver id="dlvWarranty"/>
		</mx:FormItem>
		<mx:FormItem label="Poliza de Seguro:">
			<components:Deliver id="dlvInsurance"/>
		</mx:FormItem>
		<mx:FormItem label="Existencia:">
			<components:TextInput id="txtExistence"
								  textAlign="right"/>
		</mx:FormItem>
		<mx:FormItem label="Unidad:">
			<mx:ComboBox id="cmbUnit"
						 labelField="etiqueta"
						 />
		</mx:FormItem>
		<mx:FormItem label="Ubicación:">
			<mx:ComboBox id="cmbLocation"
						 labelField="etiqueta"
						 />
		</mx:FormItem>
		<mx:FormItem label="Responsable:">
			<mx:ComboBox id="cmbResponsible"
						 labelField="nombreCompleto"
						 />
		</mx:FormItem>
		<mx:FormItem label="Estatus:">
			<mx:ComboBox id="cmbStatus"
						 labelField="etiqueta"
						 />
		</mx:FormItem>
		<mx:FormItem label="No. de Certificado:">
			<components:TextInput id="txtCertificateNumber"/>
		</mx:FormItem>
		<mx:FormItem label="Fecha de Calibración:">
			<components:DateField id="dtfCalibration"/>
		</mx:FormItem>
		<mx:FormItem label="Fecha Próxima Calibración:">
			<components:DateField id="dtfNextCalibration"/>
		</mx:FormItem>
		<mx:FormItem label="Certificado de Calibración:">
			<components:Deliver id="dlvCalibrationCertificate"/>
		</mx:FormItem>
		<mx:FormItem label="Mantenimiento o Servicio:">
			<mx:ComboBox id="cmbService"
						 labelField="etiqueta"
						 />
		</mx:FormItem>
		<mx:FormItem label="Fecha de Mantenimiento o Servicio:">
			<components:DateField id="dtfServiceDate"/>
		</mx:FormItem>
		<mx:FormItem label="Orden de Mantenimiento o Servicio:">
			<components:Deliver id="dlvServiceOrder"/>
		</mx:FormItem>
		<components:Comments id="comments"/>
		<mx:FormItem>
			<mx:Button id="btnAccept" label="Aceptar" click="btnAccept_clickHandler(event)"/>
		</mx:FormItem>
	</mx:Form>
	<mx:RemoteObject id="herramientaService" destination="herramientaService" fault="herramientaService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:CallResponder id="responseSave" result="responseSave_resultHandler(event)"/>
	<mx:CallResponder id="responseUpdate" result="responseUpdate_resultHandler(event)"/>
	<mx:RemoteObject id="catalogoService" destination="catalogoService" fault="catalogoService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:CallResponder id="responseGetGrupoFamiliaA" result="responseGetGrupoFamiliaA_resultHandler(event)"/>
	<mx:CallResponder id="responseGetUnidadA" result="responseGetUnidadA_resultHandler(event)"/>
	<mx:CallResponder id="responseGetUbicacionA" result="responseGetUbicacionA_resultHandler(event)"/>
	<mx:CallResponder id="responseGetColaborador" result="responseGetColaborador_resultHandler(event)"/>
	<mx:CallResponder id="responseGetEstatusA" result="responseGetEstatusA_resultHandler(event)"/>
	<mx:CallResponder id="responseGetTipoMantenimiento" result="responseGetTipoMantenimiento_resultHandler(event)"/>
</mx:VBox>
