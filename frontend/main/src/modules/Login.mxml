<?xml version="1.0" encoding="ISO-8859-1"?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" 
		   width="650" height="600" 
		   xmlns:components="components.*" 
		   verticalAlign="middle" horizontalAlign="center"
		   initialize="initializeHandler(event)"
		   creationComplete="creationCompleteHandler(event)">
	<mx:Script>
		<![CDATA[
			import com.hurlant.crypto.Crypto;
			import com.hurlant.crypto.symmetric.ICipher;
			import com.hurlant.crypto.symmetric.IPad;
			import com.hurlant.crypto.symmetric.PKCS5;
			import com.hurlant.util.Hex;
			
			import components.usuarios.User;
			
			import events.GenericEvent;
			
			import model.Constants;
			import model.Model;
			import model.Perfil;
			import model.Usuario;
			import model.Util;
			
			import mx.collections.ArrayCollection;
			import mx.com.gahm.componentes.validadores.Constantes;
			import mx.com.gahm.componentes.validadores.InicializaValidadoresEtiquetas;
			import mx.com.gahm.componentes.validadores.ValidadorRequerido;
			import mx.core.Application;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			
			public var validators:InicializaValidadoresEtiquetas = null;
			
			public static const encryptionKey:String = "3597a1b3c011eda3b49cca124d4d4e19";
			
			
			protected function enterButton_clickHandler(event:Event):void
			{
				if( !this.enterButton.enabled ){
					return;
				}
				var user:String = StringUtil.trim( this.txtUser.text );
				var password:String = StringUtil.trim( this.txtPassword.text );
				
				if( user == "" || password == "" ){
					Util.showErrorMessage(Constants.REQUIRED_FIELD);
					return;
				}
				password = encrypt( password );
				this.responseLogin.token = this.usuarioService.login(user, password, "");
			}
			
			public static function encrypt( stringToEncrypt:String ):String {
				var k:String = encryptionKey;
				var kdata:ByteArray = Hex.toArray(k);
				var txt:String = stringToEncrypt;
				var data:ByteArray = Hex.toArray(Hex.fromString(txt));;
				var name:String = "simple-aes-ecb";
				var pad:IPad =new PKCS5();
				var mode:ICipher = Crypto.getCipher(name, kdata, pad);
				pad.setBlockSize(mode.getBlockSize());
				mode.encrypt(data);
				return Hex.fromArray(data);
			}
			
			public static function decrypt(encryptedResult:String):String {
				if (encryptedResult != '') {
					var k:String = encryptionKey;
					var kdata:ByteArray = Hex.toArray(k);
					var txt:String = encryptedResult;
					var data:ByteArray = Hex.toArray(txt);
					var name:String = "simple-aes-ecb";
					var pad:IPad =new PKCS5();
					var mode:ICipher = Crypto.getCipher(name, kdata, pad);
					pad.setBlockSize(mode.getBlockSize());
					mode.decrypt(data);
					if (data==null){
						return null;
					}
					var txtDecrypted:String = Hex.toString(Hex.fromArray(data));
					return txtDecrypted;
				}
				return null;
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.initializeValidators();
				
				//this.enterButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK) );	
			}
			
			private function initializeValidators():void{
				this.validators = new InicializaValidadoresEtiquetas();
				this.validators.crearValidadorRestrictor("required", ValidadorRequerido.nombre );
				this.validators.setValidador( this.txtUser, "required" );
				this.validators.setValidador( this.txtPassword, "required" );
			}
			
			protected function usuarioService_faultHandler(event:FaultEvent):void
			{
				Util.showErrorMessage( Util.splitException( event.fault.faultString ) );
			}
			
			protected function responseLogin_resultHandler(event:ResultEvent):void
			{
				var user:Usuario = event.result as Usuario;
				if( user == null ){
					Util.showErrorMessage("Usuario ó Contraseña inválidos");
					return;
				}
				var modelApp:Model = Model.getInstance();
				modelApp.user = user;
				var genericEvent:GenericEvent = new GenericEvent("validUser");
				genericEvent.information = user; 
				this.dispatchEvent( genericEvent );
			}
			
			protected function initializeHandler(event:FlexEvent):void
			{
				this.validadorGAHM.send();
			}
			
			protected function validadorGAHM_faultHandler(event:FaultEvent):void
			{
				this.enterButton.enabled = true;				
			}
			
			protected function validadorGAHM_resultHandler(event:ResultEvent):void
			{
				var acceso:Boolean = true;
				try
				{
					var respuesta:String = event.result as String;
					var token:String = "GAHM";
					var codigos:Array = respuesta.split(" ");
					var codigoAcceso:String = Util.validateEmpty( codigos[ 0 ] );
					var mensaje:String = Util.validateEmpty( codigos[ 1 ] );
					if( codigoAcceso != null ){
						codigoAcceso = Login.decrypt( codigoAcceso );
					}
					if( mensaje != null ){
						mensaje = Login.decrypt( mensaje );
						switch(mensaje)
						{
							case "347":
							{
								mensaje = "Favor de contactar al Proveedor, ya que hay detalles administrativos.";
								break;
							}
							case "64":
							{
								mensaje = "No habrá acceso al Sistema hasta que se haya cubierto el pago correspondiente.";
								break;
							}	
							default:
							{
								mensaje = null;
								break;
							}
						}
					}
					if( codigoAcceso == token ){
						acceso = true;
					}else{
						acceso = false;
						if( mensaje != null ){
							Util.showErrorMessage( mensaje );
						}
					}
				} 
				catch(error:Error) 
				{
					acceso = true;
				}
				if( acceso ){
					this.contadorGAHM.send();
				}
				this.enterButton.enabled = acceso;
			}
			
			protected function contadorGAHM_resultHandler(event:ResultEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function contadorGAHM_faultHandler(event:FaultEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
		]]>
	</mx:Script>
	<mx:Metadata>
		[Event(name="validUser", type="events.GenericEvent")]
	</mx:Metadata>
	<mx:HTTPService id="validadorGAHM" url="http://manuelgaytan.com/validadorC0n3ct3l"
					result="validadorGAHM_resultHandler(event)" fault="validadorGAHM_faultHandler(event)"/>
	<mx:HTTPService id="contadorGAHM" url="http://manuelgaytan.com/contadorC0n3ct3l"
					result="contadorGAHM_resultHandler(event)" fault="contadorGAHM_faultHandler(event)"/>
	<!--<mx:SWFLoader source="assets/blimp_ticker_flash9.swf"/>-->
	<mx:Panel title="Autenticación" styleName="panelStyle"
			  paddingBottom="2" paddingTop="2">
		<mx:Form borderStyle="none" width="100%" height="100%" 
				 backgroundImage="assets/images/candado.jpeg"
				 backgroundAlpha="0.5">
			<mx:FormItem required="true" label="Usuario:">
				<components:TextInput id="txtUser"
									  text=""/>
			</mx:FormItem>
			<mx:FormItem required="true" label="Contraseña:">
				<components:TextInput id="txtPassword" displayAsPassword="true"
									  enter="enterButton_clickHandler(event)"
									  text=""/>
			</mx:FormItem>
			<mx:FormItem>
				<mx:Button label="Entrar" id="enterButton" click="enterButton_clickHandler(event)" enabled="false"/>
			</mx:FormItem>
		</mx:Form>
	</mx:Panel>
	<mx:RemoteObject id="usuarioService" destination="usuarioService" fault="usuarioService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:CallResponder id="responseLogin" result="responseLogin_resultHandler(event)"/>
</mx:Module>
