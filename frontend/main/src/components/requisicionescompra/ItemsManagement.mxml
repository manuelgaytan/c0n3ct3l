<?xml version="1.0" encoding="utf-8"?>
<mx:DataGrid xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="250"
			 dataProvider="{new ArrayCollection()}"
			 editable="{this._purchaseOrderMode}"
			 variableRowHeight="true"
			 doubleClick="doubleClickHandler(event)"
			 doubleClickEnabled="true">
	<mx:Script>
		<![CDATA[
			import model.Constants;
			import model.PartidaRequisicionCompra;
			import model.Producto;
			import model.Proyecto;
			import model.ProyectoPadreHijo;
			import model.SolicitudServicioMaquilado;
			import model.Util;
			
			import mx.collections.ArrayCollection;
			import mx.com.gahm.componentes.validadores.Constantes;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			
			private var _purchaseOrderMode:Boolean = false;
			
			public function set purchaseOrderMode(value:Boolean):void{
				this._purchaseOrderMode = value;
			}
			
			public function addItem(entry:PartidaRequisicionCompra):void{
				if( entry == null ){
					return;
				}
				(this.dataProvider as ArrayCollection).addItem( entry );
			}
			
			public function reset():void
			{
				Util.removeItems( this.dataProvider );
			}
			
			private function labelFunctionImporte(item:Object, column:DataGridColumn):String{
				var returnValue:String = "";
				if( item != null &&
					item.cantidad != null &&
					item.costo != null ){
					var cantidad:Number = Util.stringToNumber(item.cantidad);
					if( !isNaN( cantidad ) ){
						item.importe = (cantidad*item.costo);
						returnValue = item.importe.toString();
					}
				}
				return returnValue;
			}
			
			public function set maquiladoraServiceRequest(value:SolicitudServicioMaquilado):void{
				if( value == null ){
					return;
				}
				this.reset();
				var i:Number = 1;
				if( value.proyectoPadre == null ){
					this.divideProject(i, value.proyecto);
				}else{
					for each (var proyectoPadreHijo:ProyectoPadreHijo in (value.proyectoPadre.proyectoPadreHijos) )
					{
						this.divideProject(i, proyectoPadreHijo.proyecto);
						i+=2;
					}
				}
			}
			
			private function divideProject(i:Number, proyecto:Proyecto):void
			{
				if( proyecto == null ){
					return;
				}
				var entry:PartidaRequisicionCompra = null;
				entry = new PartidaRequisicionCompra();
				entry.partida = i.toString();
				entry.cantidad = Constants.OC_QUANTITY.toString();
				entry.unidad = Constants.OC_UNIT;
				entry.descripcion = Constants.OC_ADVANCE + " " + proyecto.producto.modelo + 
					"\n" + proyecto.producto.actividadRealizar + ", " + proyecto.producto.equipo + 
					"\n" + proyecto.producto.tipoServicio + " " + Constants.OC_SITE + " " + proyecto.centralSitio;
				if( proyecto.producto.tipoServicio == Producto.TIPO_SERVICIO_LOCAL ){
					entry.costo = proyecto.producto.costoLocalProveedor;
				}
				if( proyecto.producto.tipoServicio == Producto.TIPO_SERVICIO_FORANEO ){
					entry.costo = proyecto.producto.costoForaneoProveedor;
				}
				entry.importe = Number(entry.cantidad) * entry.costo;
				this.addItem( entry );
				i++;
				entry = new PartidaRequisicionCompra();
				entry.partida = i.toString();
				entry.cantidad = Constants.OC_QUANTITY.toString();
				entry.unidad = Constants.OC_UNIT;
				entry.descripcion = Constants.OC_SETTLEMENT + " " + proyecto.producto.modelo + 
					"\n" + proyecto.producto.actividadRealizar + ", " + proyecto.producto.equipo + 
					"\n" + proyecto.producto.tipoServicio + " " + Constants.OC_SITE + " " + proyecto.centralSitio;
				if( proyecto.producto.tipoServicio == Producto.TIPO_SERVICIO_LOCAL ){
					entry.costo = proyecto.producto.costoLocalProveedor;
				}
				if( proyecto.producto.tipoServicio == Producto.TIPO_SERVICIO_FORANEO ){
					entry.costo = proyecto.producto.costoForaneoProveedor;
				}
				entry.importe = Number(entry.cantidad) * entry.costo;
				this.addItem( entry );
			}
			
			protected function doubleClickHandler(event:MouseEvent):void
			{
				if( this._purchaseOrderMode ){
					return;
				}
				if( this.selectedItems == null ||
					this.selectedItems.length == 0 ){
					Util.showErrorMessage("Debe seleccionar elementos de la tabla.");
					return;
				}
				Alert.show("Confirme si desea eliminar los elementos.","Advertencia",Alert.YES+Alert.NO,this, deleteItems);
			}
			
			private function deleteItems(event:CloseEvent):void
			{
				if( event.detail == Alert.NO ){
					return;
				}
				(this.dataProvider as ArrayCollection).removeItemAt( this.selectedIndex );
			}
		]]>
	</mx:Script>
	<mx:columns>
		<!--<mx:DataGridColumn id="dtgID" headerText="Partida"
						   dataField="partida"
						   width="60"
						   textAlign="center"/>-->
		<mx:DataGridColumn id="dtgCode" headerText="Código"
						   dataField="codigo"
						   width="100"
						   editable="false"/>
		<mx:DataGridColumn id="dtgFamilyGroup" headerText="{'Grupo o\nFamilia'}"
						   dataField="grupoFamilia"
						   width="100"
						   editable="false"/>
		<mx:DataGridColumn id="dtgDescription" headerText="Descripción"
						   dataField="descripcion" wordWrap="true"
						   width="160"
						   editable="false"/>
		<mx:DataGridColumn id="dtgUnit" headerText="Unidad"
						   dataField="unidad"
						   width="80"
						   textAlign="right"
						   editable="false"/>
		<mx:DataGridColumn id="dtgQuantity" headerText="Cantidad"
						   dataField="cantidad"
						   width="60"
						   textAlign="right"
						   editable="false"/>
		<mx:DataGridColumn id="dtgValidation" headerText="Validación"
						   dataField="validacion"
						   width="120"
						   visible="{!this._purchaseOrderMode}"
						   editable="false"/>
		<mx:DataGridColumn id="dtgCost" headerText="{'Precio\nUnitario'}"
						   dataField="costo"
						   width="80"
						   textAlign="right"
						   visible="{this._purchaseOrderMode}"
						   editable="{this._purchaseOrderMode}"/>
		<mx:DataGridColumn id="dtgImport" headerText="Importe"
						   dataField="importe"
						   width="80"
						   labelFunction="labelFunctionImporte"
						   textAlign="right"
						   editable="false"
						   visible="{this._purchaseOrderMode}"/>
	</mx:columns>
</mx:DataGrid>	
