<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:components="components.*"
		 creationComplete="creationCompleteHandler(event)" xmlns:concentradoordenescompracliente="components.concentradoordenescompracliente.*"
		 >
	<mx:Script>
		<![CDATA[
			import components.equiposmedicion.Consult;
			import components.equipostransporte.Consult;
			import components.hardware.Consult;
			import components.herramientas.Consult;
			import components.materiales.Consult;
			import components.software.Consult;
			import components.solicitudalmacen.Consult;
			import components.telefoniamovil.Consult;
			
			import model.AreaSolicitante;
			import model.Catalogo;
			import model.Cliente;
			import model.Colaborador;
			import model.ConcentradoOrdenCompraCliente;
			import model.Constants;
			import model.PartidaConcentradoOrdenCompraCliente;
			import model.Perfil;
			import model.Prioridad;
			import model.TipoAlmacen;
			import model.TipoMantenimiento;
			import model.Util;
			
			import modules.Almacen;
			
			import mx.collections.ArrayCollection;
			import mx.com.gahm.componentes.validadores.InicializaValidadoresEtiquetas;
			import mx.com.gahm.componentes.validadores.ValidadorAlfabetico;
			import mx.com.gahm.componentes.validadores.ValidadorAlfanumerico;
			import mx.com.gahm.componentes.validadores.ValidadorDecimal;
			import mx.com.gahm.componentes.validadores.ValidadorEntero;
			import mx.com.gahm.componentes.validadores.ValidadorNumerico;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.object_proxy;
			
			private var mode:String = null;
			private var _item:ConcentradoOrdenCompraCliente;
			private var validators:InicializaValidadoresEtiquetas;
			private var validatorsEntry:InicializaValidadoresEtiquetas;
			
			public function set registrer(value:Boolean):void{
				mode = Constants.REGISTER_MODE;
				this.label = Constants.REGISTRAR;
			}
			
			public function set update(value:Boolean):void{
				mode = Constants.UPDATE_MODE;
				this.label = Constants.MODIFICAR;
			}
			
			public function set enabledComponents(value:Boolean):void{
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.modeValidation();
				this.initializeValidators();
				this.fillCombos();
			}
			
			public function set concentratedCustomerPurchaseOrders(value:ConcentradoOrdenCompraCliente):void{
				if( value == null ){
					return;
				}
				this.cleanForm();
				this._item = value;
				this.setConcentratedCustomerPurchaseOrders(); 
			}
			
			private function setConcentratedCustomerPurchaseOrders():void
			{
				if( this._item == null ){
					return;
				}
				this.txtID.text = this._item.id;
				if( Util.isFill( this.cmbClient ) && this._item.cliente != null ){
					this.cmbClient.selectedIndex = Util.selectedIndexFromCombo( this.cmbClient.dataProvider as ArrayCollection, 
						this._item.cliente.id);
				}
				this.txtPurchaseOrder.text = this._item.ordenCompra;
				this.dtfPurchaseOrderDate.selectedDate = this._item.fechaOrdenCompra;
				this.txtRequisitionNumber.text = this._item.numRequisicion.toString();
				this.itemsManagement.dataProvider = this._item.partidasConcentradoOrdenCompraCliente;
				this.txtSite.text = this._item.centralSitio;
				this.txtSiteID.text = this._item.idSitio;
				this.txtServiceType.text = this._item.localForaneo;
				this.txtPayCondition.text = this._item.idSitio;
				this.comments.comments = this._item.comentariosConcentradoOrdenCompraCliente;
			}
			
			private function getConcentratedCustomerPurchaseOrders():ConcentradoOrdenCompraCliente{
				var item:ConcentradoOrdenCompraCliente = null;
				if( this.mode == Constants.REGISTER_MODE ){
					item = new ConcentradoOrdenCompraCliente();
				}else{
					item = this._item;
				}
				item.cliente = Util.validateCombo( this.cmbClient ) as Cliente;
				item.ordenCompra = Util.validateEmpty( this.txtPurchaseOrder.text );
				item.fechaOrdenCompra = this.dtfPurchaseOrderDate.selectedDate;
				item.numRequisicion = Util.stringToNumber(this.txtRequisitionNumber.text);
				item.partidasConcentradoOrdenCompraCliente = this.itemsManagement.dataProvider as ArrayCollection;
				item.centralSitio = Util.validateEmpty(this.txtSite.text);
				item.idSitio = Util.validateEmpty(this.txtSiteID.text);
				item.localForaneo = Util.validateEmpty(this.txtServiceType.text);
				item.condicionPago = Util.validateEmpty(this.txtPayCondition.text);
				item.comentariosConcentradoOrdenCompraCliente = this.comments.comments;
				return item;
			}
			
			private function fillCombos():void
			{
				this.responseGetAll.token = this.clienteService.getAll();
			}
			
			protected function responseGetAllClient_resultHandler(event:ResultEvent):void
			{
				var data:ArrayCollection = event.result as ArrayCollection;
				if( data == null ){
					return;
				}
				this.cmbClient.dataProvider = data;
				if( this._item != null && this._item.cliente != null ){
					this.cmbClient.selectedIndex = Util.selectedIndexFromCombo( this.cmbClient.dataProvider as ArrayCollection, 
						this._item.cliente.id);
				}
			}
			
			protected function requisicionService_faultHandler(event:FaultEvent):void
			{
				Util.showErrorMessage( Util.splitException( event.fault.faultString ) );
			}
			
			protected function btnAccept_clickHandler(event:MouseEvent):void
			{
				if( !this.validations() ){
					Util.showMessageVerifyFields();
					return;
				}
				if( this.mode == Constants.REGISTER_MODE ){
					var concentratedCustomerPurchaseOrders:ConcentradoOrdenCompraCliente = this.getConcentratedCustomerPurchaseOrders();
					Util.showProperties( concentratedCustomerPurchaseOrders );
					this.responseSave.token = this.concentradoOrdenCompraClienteService.save( concentratedCustomerPurchaseOrders );
				}
				if( this.mode == Constants.UPDATE_MODE ){
					Alert.show("Confirme si desea actualizar el elemento.","Advertencia",Alert.YES+Alert.NO,this, updateItem);
				}
			}
			
			private function updateItem(event:CloseEvent):void{
				if( event.detail == Alert.NO ){
					return;
				}
				var concentratedCustomerPurchaseOrders:ConcentradoOrdenCompraCliente = this.getConcentratedCustomerPurchaseOrders();
				Util.showProperties( concentratedCustomerPurchaseOrders );
				this.responseUpdate.token = this.concentradoOrdenCompraClienteService.update( concentratedCustomerPurchaseOrders );
			}
			
			private function validations():Boolean
			{
				var value:Boolean = true;
				value &&= this.validators.validarFormulario();
				value &&= !(this.dtfPurchaseOrderDate.selectedDate == null);
				return value;
			}
			
			private function modeValidation():void
			{
				if( this.mode == Constants.REGISTER_MODE ){
					form.removeChild( this.frmID );
				}
			}
			
			private function initializeValidators():void
			{
				this.validators = new InicializaValidadoresEtiquetas();
				validators.crearValidadorRestrictor("generic",ValidadorAlfanumerico.nombre, 0, 255, true);
				validators.setValidador(txtPurchaseOrder, "generic");
				validators.setValidador(txtSite, "generic");
				validators.setRestrictor(txtRequisitionNumber, "generic");
				validators.setRestrictor(txtSite, "generic");
				validators.setRestrictor(txtSiteID, "generic");
				validators.setRestrictor(txtServiceType, "generic");
				this.validatorsEntry = new InicializaValidadoresEtiquetas();
				validatorsEntry.crearValidadorRestrictor("generic",ValidadorAlfanumerico.nombre, 0, 255, true);
				validatorsEntry.setValidador(txtCode, "generic");
				validatorsEntry.setValidador(txtDescription, "generic");
				validatorsEntry.crearValidadorRestrictor("genericEntero",ValidadorEntero.nombre, 99);
				validatorsEntry.setValidador(txtItem, "genericEntero");
				validatorsEntry.crearValidadorRestrictor("genericDecimal",ValidadorDecimal.nombre, 9, 2);
				validatorsEntry.setValidador(txtPrice, "genericDecimal");
			}
			
			protected function responseSave_resultHandler(event:ResultEvent):void
			{
				var eventconcentratedCustomerPurchaseOrdersNew:Event = new Event("concentratedCustomerPurchaseOrdersNew");
				this.dispatchEvent( eventconcentratedCustomerPurchaseOrdersNew );
				this.cleanForm();
			}
			
			private function cleanForm():void
			{
				this.txtID.reset();
				this.cmbClient.selectedIndex = 0;
				this.txtPurchaseOrder.reset();
				this.dtfPurchaseOrderDate.reset();
				this.txtRequisitionNumber.reset();
				this.itemsManagement.reset();
				this.txtSite.reset();
				this.txtSiteID.reset();
				this.txtServiceType.reset();
				this.txtPayCondition.reset();
				this.comments.reset();
			}
			
			protected function responseUpdate_resultHandler(event:ResultEvent):void
			{
				var eventconcentratedCustomerPurchaseOrdersUpdated:Event = new Event("concentratedCustomerPurchaseOrdersUpdated");
				this.dispatchEvent( eventconcentratedCustomerPurchaseOrdersUpdated );
				this.cleanForm();
			}
			
			protected function catalogoService_faultHandler(event:FaultEvent):void
			{
				Util.showErrorMessage( Util.splitException( event.fault.faultString ) );
			}
			
			protected function btnAddItem_clickHandler(event:MouseEvent):void
			{
				var entry:PartidaConcentradoOrdenCompraCliente = this.getValidEntry();
				if( entry == false ){
					Util.showErrorMessage("Valide los campos de la Partida");
					return;
				}
				this.itemsManagement.addItem( entry );
				this.cleanFormEntry();
			}
			
			private function getValidEntry():PartidaConcentradoOrdenCompraCliente
			{
				var entry:PartidaConcentradoOrdenCompraCliente = null;
				if( !this.isValidEntry() ){
					return entry;
				}
				entry = new PartidaConcentradoOrdenCompraCliente();
				entry.item = Util.stringToNumber( this.txtItem.text );
				entry.codigo = Util.validateEmpty( this.txtCode.text );
				entry.descripcion = Util.validateEmpty( this.txtDescription.text );
				entry.precioUnitario = Util.stringToNumber( this.txtPrice.text );
				return entry;
			}
			
			private function isValidEntry():Boolean
			{
				return this.validatorsEntry.validarFormulario();
			}
			
			private function cleanFormEntry():void
			{
				this.txtItem.reset();
				this.txtCode.reset();
				this.txtDescription.reset();
				this.txtPrice.reset();
			}
		]]>
	</mx:Script>
	<mx:Metadata>
		[Event(name="concentratedCustomerPurchaseOrdersNew", type="flash.events.Event")]
		[Event(name="concentratedCustomerPurchaseOrdersUpdated", type="flash.events.Event")]
	</mx:Metadata>
	<mx:Form id="form">
		<mx:FormItem id="frmID" label="ID:">
			<components:TextInput id="txtID" editable="false"
								  textAlign="right"/>
		</mx:FormItem>
		<mx:FormItem label="Cliente:">
			<mx:ComboBox id="cmbClient"
						 labelField="nombreComercial"
						 />
		</mx:FormItem>
		<mx:FormItem label="Orden de Compra:">
			<components:TextInput id="txtPurchaseOrder"
								  />
		</mx:FormItem>
		<mx:FormItem label="Fecha de Orden de Compra:">
			<components:DateField id="dtfPurchaseOrderDate" creationComplete="dtfPurchaseOrderDate.selectedDate = new Date()"/>
		</mx:FormItem>
		<mx:FormItem label="Número de Requisición:">
			<components:TextInput id="txtRequisitionNumber"
								  />
		</mx:FormItem>
		<mx:FormItem label="Ítem:">
			<components:TextInput id="txtItem"
								  width="60"
								  textAlign="right"/>
		</mx:FormItem>
		<mx:FormItem label="Código:">
			<components:TextInput id="txtCode"
								  />
		</mx:FormItem>
		<mx:FormItem label="Descripción:">
			<components:TextInput id="txtDescription"
								  width="400"
								  />
		</mx:FormItem>
		<mx:FormItem label="Precio Unitario:">
			<components:TextInput id="txtPrice"
								  textAlign="right"
								  width="90"
								  />
		</mx:FormItem>
		<mx:FormItem>
			<mx:Button id="btnAddItem" label="Agregar Partida" click="btnAddItem_clickHandler(event)"/>
		</mx:FormItem>
		<concentradoordenescompracliente:ItemsManagement id="itemsManagement"/>
		<mx:FormItem label="Sitio:">
			<components:TextInput id="txtSite"/>
		</mx:FormItem>
		<mx:FormItem label="ID Sitio:">
			<components:TextInput id="txtSiteID"
								  />
		</mx:FormItem>
		<mx:FormItem label="Local/Foráneo:">
			<components:TextInput id="txtServiceType"
								  width="120"
								  />
		</mx:FormItem>
		<mx:FormItem label="Condiciones de Pago:">
			<components:TextArea id="txtPayCondition"
								  width="400"
								  maxChars="255"
								  />
		</mx:FormItem>
		<components:Comments id="comments"/>
		<mx:FormItem>
			<mx:Button id="btnAccept" label="Aceptar" click="btnAccept_clickHandler(event)"/>
		</mx:FormItem>
	</mx:Form>
	<mx:RemoteObject id="concentradoOrdenCompraClienteService" destination="concentradoOrdenCompraClienteService" fault="requisicionService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:CallResponder id="responseSave" result="responseSave_resultHandler(event)"/>
	<mx:CallResponder id="responseUpdate" result="responseUpdate_resultHandler(event)"/>
	<mx:RemoteObject id="clienteService" destination="clienteService" fault="requisicionService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:CallResponder id="responseGetAll" result="responseGetAllClient_resultHandler(event)" fault="requisicionService_faultHandler(event)"/>
</mx:VBox>
