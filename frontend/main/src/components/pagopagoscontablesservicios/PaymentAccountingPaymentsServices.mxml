<?xml version="1.0" encoding="ISO-8859-1"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:components="components.*"
		 creationComplete="creationCompleteHandler(event)" xmlns:proyectos="components.proyectos.*" xmlns:notascreditoclientes="components.notascreditoclientes.*" xmlns:informacionfacturas="components.informacionfacturas.*" xmlns:notascreditoproveedores="components.notascreditoproveedores.*" xmlns:facturacionproveedores="components.facturacionproveedores.*" xmlns:comprobacionesviaticos="components.comprobacionesviaticos.*" xmlns:pagoscontablesservicios="components.pagoscontablesservicios.*"
		 >
	<mx:Script>
		<![CDATA[
			import model.TipoPago;
			import components.clientes.Client;
			
			import events.GenericEvent;
			
			import model.BancoConectel;
			import model.Catalogo;
			import model.Cliente;
			import model.Colaborador;
			import model.Constants;
			import model.Estado;
			import model.EstadoOrdenCompra;
			import model.EstadoValidacionCosto;
			import model.EstadoValidacionOperativa;
			import model.FiltroProyecto;
			import model.MedioTransporte;
			import model.MovimientoPagoContableServicio;
			import model.NotaCreditoCliente;
			import model.NotaCreditoProveedor;
			import model.PagoMovimientoPagoContableServicio;
			import model.Producto;
			import model.Proveedor;
			import model.ProveedorCalificado;
			import model.ProveedorMaquilador;
			import model.Proyecto;
			import model.TipoColaborador;
			import model.TipoEntregable;
			import model.Util;
			
			import mx.charts.chartClasses.DualStyleObject;
			import mx.collections.ArrayCollection;
			import mx.com.gahm.componentes.validadores.Constantes;
			import mx.com.gahm.componentes.validadores.InicializaValidadoresEtiquetas;
			import mx.com.gahm.componentes.validadores.ValidadorCadenaCualquierCaracter;
			import mx.com.gahm.componentes.validadores.ValidadorDecimal;
			import mx.com.gahm.componentes.validadores.ValidadorEntero;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			private var mode:String = null;
			private var _item:PagoMovimientoPagoContableServicio;
			private var validators:InicializaValidadoresEtiquetas;
			
			public function set registrer(value:Boolean):void{
				mode = Constants.REGISTER_MODE;
				this.label = Constants.REGISTRAR;
			}
			
			public function set update(value:Boolean):void{
				mode = Constants.UPDATE_MODE;
				this.label = Constants.MODIFICAR;
			}
			
			public function set enabledComponents(value:Boolean):void{
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.modeValidation();
				this.initializeValidators();
				this.fillCombos();
			}
			
			public function set providerPayment(value:PagoMovimientoPagoContableServicio):void{
				if( value == null ){
					return;
				}
				this.cleanForm();
				this._item = value;
				this.setItem(); 
			}
			
			private function setItem():void
			{
				if( this._item == null ){
					return;
				}
				this.txtID.text = this._item.id.toString();
				this.accountingPaymentsServicesConsult.datagrid.dataProvider = Util.asArrayCollection( this._item.movimientoPagoContableServicio );
				this.accountingPaymentsServicesConsult.datagrid.selectedIndex = 0;
				if( Util.isFill( this.cmbConectelBank ) && this._item.bancoConectel != null ){
					this.cmbConectelBank.selectedIndex = Util.selectedIndexFromCombo( this.cmbConectelBank.dataProvider as ArrayCollection, 
						this._item.bancoConectel.id);
				}
				this.dtfPaymentDate.selectedDate = this._item.fechaAbono;
				this.txtAmount.text = this._item.monto.toString();
				this.txtPaymentReference.text = this._item.referenciaAbono;
				this.txtDestinationAccounts.text = this._item.cuentasDestino;
				if( Util.isFill( this.cmbTipPago ) && this._item.tipoPago != null ){
					this.cmbTipPago.selectedIndex = Util.selectedIndexFromCombo( this.cmbTipPago.dataProvider as ArrayCollection, 
						this._item.tipoPago.id);
				}
				this.comments.setCommentsIn( this._item.comentariosPagoMovimientoPagoContableServicio, "comentarioTesoreria");
			}
			
			private function getProviderPayment():PagoMovimientoPagoContableServicio{
				var providerPayment:PagoMovimientoPagoContableServicio = null;
				if( this.mode == Constants.REGISTER_MODE ){
					providerPayment = new PagoMovimientoPagoContableServicio();
				}else{
					providerPayment = this._item;
				}
				providerPayment.movimientoPagoContableServicio = this.accountingPaymentsServicesConsult.datagrid.selectedItem as MovimientoPagoContableServicio;
				providerPayment.bancoConectel = Util.validateCombo( this.cmbConectelBank ) as BancoConectel;
				providerPayment.fechaAbono = this.dtfPaymentDate.selectedDate;
				providerPayment.monto = Util.stringToNumber( this.txtAmount.text );
				providerPayment.referenciaAbono = Util.validateEmpty( this.txtPaymentReference.text );
				providerPayment.cuentasDestino = Util.validateEmpty( this.txtDestinationAccounts.text );
				providerPayment.tipoPago = new TipoPago();
				providerPayment.tipoPago.id = ((this.cmbTipPago.selectedItem as TipoPago).id);
				providerPayment.comentariosPagoMovimientoPagoContableServicio = this.comments.getCommentsAsInWith("model.ComentarioTesoreria","model.ComentarioPagoMovimientoPagoContableServicio","comentarioTesoreria");
				return providerPayment;
			}
			
			private function fillCombos():void
			{
				this.responseGetBancoConectel.token = this.bancoConectelService.getAll();
				this.responseTiposPago.token= this.catalogoService.getTipoPagoChequeEfectivoTransferencia();
			}
			
			
			protected function pagoMovimientoPagoContableServicioService_faultHandler(event:FaultEvent):void
			{
				Util.showErrorMessage( Util.splitException( event.fault.faultString ) );
			}
			
			protected function btnAccept_clickHandler(event:MouseEvent):void
			{
				if( !this.validations() ){
					Util.showMessageVerifyFields();
					return;
				}
				if( this.mode == Constants.REGISTER_MODE ){
					var providerPayment:PagoMovimientoPagoContableServicio = this.getProviderPayment();
					Util.showProperties( providerPayment );
					this.responseSave.token = this.pagoMovimientoPagoContableServicioService.save( providerPayment );
				}
				if( this.mode == Constants.UPDATE_MODE ){
					Alert.show("Confirme si desea actualizar el elemento.","Advertencia",Alert.YES+Alert.NO,this, updateItem);
				}
			}
			
			private function updateItem(event:CloseEvent):void{
				if( event.detail == Alert.NO ){
					return;
				}
				var item:PagoMovimientoPagoContableServicio = this.getProviderPayment();
				Util.showProperties( item );
				this.responseUpdate.token = this.pagoMovimientoPagoContableServicioService.update( item );
			}
			
			private function validations():Boolean
			{
				var value:Boolean = true;
				value &&= this.validators.validarFormulario();
				value &&= this.accountingPaymentsServicesConsult.datagrid.selectedItem != null;
				value &&= Util.listBaseSelected( this.cmbConectelBank );
				value &&= this.dtfPaymentDate.selectedDate != null;
				value &&= Util.listBaseSelected( this.cmbTipPago );
				return value;
			}
			
			private function modeValidation():void
			{
				if( this.mode == Constants.REGISTER_MODE ){
					form.removeChild( this.frmID );
				}
				if( this.mode == Constants.UPDATE_MODE ){
				}
			}
			
			private function initializeValidators():void
			{
				this.validators = new InicializaValidadoresEtiquetas();
				this.validators.crearValidadorRestrictor("genericDecimal", ValidadorDecimal.nombre, 9, 2);
				this.validators.setValidador( this.txtAmount, "genericDecimal" );
				this.validators.crearValidadorRestrictor("generic",ValidadorCadenaCualquierCaracter.nombre, 0, 255);
				this.validators.setRestrictor( this.txtPaymentReference, "generic");
				this.validators.setValidador( this.txtDestinationAccounts, "generic");
			}
			
			protected function responseSave_resultHandler(event:ResultEvent):void
			{
				var eventGeneralDataProjectNew:Event = new Event("providerPaymentNew");
				this.dispatchEvent( eventGeneralDataProjectNew );
				this.cleanForm();
			}
			
			private function cleanForm():void
			{
				Util.upScroll( this );
				this.txtID.reset();
				this.accountingPaymentsServicesConsult.datagrid.selectedItem = null;
				this.cmbConectelBank.selectedIndex = 0;
				this.dtfPaymentDate.reset();
				this.txtAmount.reset();
				this.txtPaymentReference.reset();
				this.txtDestinationAccounts.reset();
				this.cmbTipPago.selectedIndex=0;
				this.comments.reset();
			}
			
			protected function responseUpdate_resultHandler(event:ResultEvent):void
			{
				var eventGeneralDataProjectUpdated:Event = new Event("providerPaymentUpdated");
				this.dispatchEvent( eventGeneralDataProjectUpdated );
				this.cleanForm();
			}
			
			protected function responseGetBancoConectel_resultHandler(event:ResultEvent):void
			{
				var data:ArrayCollection = event.result as ArrayCollection;
				if( data == null ){
					return;
				}
				this.cmbConectelBank.dataProvider = data;
				if( Util.isFill( this.cmbConectelBank ) && this._item 
					&& this._item.bancoConectel != null ){
					this.cmbConectelBank.selectedIndex = Util.selectedIndexFromCombo( this.cmbConectelBank.dataProvider as ArrayCollection, 
						this._item.bancoConectel.id);
				}
			}
			
			protected function accountingPaymentsServicesConsult_accountingPaymentsServicesDetailHandler(event:GenericEvent):void
			{
				var accountingPaymentsServices:MovimientoPagoContableServicio = this.accountingPaymentsServicesConsult.datagrid.selectedItem as MovimientoPagoContableServicio;
				if( accountingPaymentsServices == null ){
					Util.showErrorMessage("Primero debe seleccionar un elemento.");
					return;
				}
				this.txtAmount.text = accountingPaymentsServices.totalPagar.toString();
			}
			
			protected function responseGetAll_resultHandler(event:ResultEvent):void
			{
				accountingPaymentsServicesConsult.setDataGridData( event.result as ArrayCollection );
			}
			
			protected function btnViewAccountingPaymentsServices_clickHandler(event:MouseEvent):void
			{
				var accountingPaymentsServices:MovimientoPagoContableServicio = this.accountingPaymentsServicesConsult.datagrid.selectedItem as MovimientoPagoContableServicio;
				if( accountingPaymentsServices == null ){
					Util.showErrorMessage("Primero debe seleccionar un elemento.");
					return;
				}
				var genericEvent:GenericEvent = new GenericEvent("accountingPaymentsServicesSelected");
				genericEvent.information = accountingPaymentsServices;
				this.dispatchEvent( genericEvent );
			}
			
			protected function responseTiposPago_resultHandler(event:ResultEvent):void
			{
				var data:ArrayCollection = event.result as ArrayCollection;
				if( data == null ){
					return;
				}
				this.cmbTipPago.dataProvider = data;//Util.addEmptyCatalgo( data, "tipo" );
				if( this._item != null && this._item.tipoPago != null ){
					this.cmbTipPago.selectedIndex = Util.selectedIndexFromCombo( this.cmbTipPago.dataProvider as ArrayCollection, 
						this._item.tipoPago.id);
				} 
			}
		]]>
	</mx:Script>
	<mx:Metadata>
		[Event(name="providerPaymentNew", type="flash.events.Event")]
		[Event(name="providerPaymentUpdated", type="flash.events.Event")]
		[Event(name="providerPaymentProjectDone", type="flash.events.Event")]
		[Event(name="creditNoteSelected", type="events.GenericEvent")]
		[Event(name="accountingPaymentsServicesSelected", type="events.GenericEvent")]
	</mx:Metadata>
	<mx:Form id="form">
		<mx:FormItem required="true" id="frmID" label="ID:" direction="horizontal">
			<components:TextInput id="txtID" width="80" textAlign="right"
								  editable="false"/>
		</mx:FormItem>
		<mx:FormItem required="true" label="Pagos Contables y Servicios:"/>
		<mx:VBox width="820">
			<mx:VBox width="100%" height="100%" verticalGap="5">
				<pagoscontablesservicios:Consult id="accountingPaymentsServicesConsult" accountingPaymentsServicesDetail="accountingPaymentsServicesConsult_accountingPaymentsServicesDetailHandler(event)"
											 readOnly="true"/>
				<mx:Button id="btnViewAccountingPaymentsServices" label="Ver Pago Contable y Servicios" click="btnViewAccountingPaymentsServices_clickHandler(event)"/>
			</mx:VBox>
		</mx:VBox>
		<mx:FormItem required="true" label="Banco Conectel:">
			<mx:ComboBox id="cmbConectelBank" width="200"
						 labelField="banco"/>
		</mx:FormItem>
		<mx:FormItem required="true" label="Fecha:">
			<components:DateField id="dtfPaymentDate"
								  creationComplete="this.dtfPaymentDate.selectedDate = new Date()"/>
		</mx:FormItem>
		<mx:FormItem required="true" label="Monto:">
			<components:TextInput id="txtAmount" textAlign="right" width="100"/>
		</mx:FormItem>
		<mx:FormItem label="Referencia de Pago:">
			<components:TextInput id="txtPaymentReference" textAlign="right" width="260"/>
		</mx:FormItem>
		<mx:FormItem label="Cuentas Destino:" required="true">
			<components:TextInput id="txtDestinationAccounts" textAlign="right" width="260"/>
		</mx:FormItem>
		<mx:FormItem required="true" label="Tipo de Pago:">
			<mx:ComboBox id="cmbTipPago"
						 labelField="tipo"
						 />
		</mx:FormItem>
		<components:Comments id="comments"/>
		<mx:FormItem direction="horizontal">
			<mx:Button id="btnAccept" label="Aceptar" click="btnAccept_clickHandler(event)"/>
		</mx:FormItem>
	</mx:Form>
	<mx:RemoteObject id="pagoMovimientoPagoContableServicioService" destination="pagoMovimientoPagoContableServicioService" fault="pagoMovimientoPagoContableServicioService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:CallResponder id="responseSave" result="responseSave_resultHandler(event)"/>
	<mx:CallResponder id="responseUpdate" result="responseUpdate_resultHandler(event)"/>
	<mx:RemoteObject id="bancoConectelService" destination="bancoConectelService" fault="pagoMovimientoPagoContableServicioService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:CallResponder id="responseGetBancoConectel" result="responseGetBancoConectel_resultHandler(event)"/>
	<mx:RemoteObject id="comprobanteViaticosService" destination="comprobanteViaticosService" fault="pagoMovimientoPagoContableServicioService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:CallResponder id="responseGetAll" result="responseGetAll_resultHandler(event)"/>
	<mx:RemoteObject id="catalogoService" destination="catalogoService" fault="pagoMovimientoPagoContableServicioService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:CallResponder id="responseTiposPago" result="responseTiposPago_resultHandler(event)" />
</mx:VBox>