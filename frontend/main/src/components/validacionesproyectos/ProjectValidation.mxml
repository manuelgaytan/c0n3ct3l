<?xml version="1.0" encoding="ISO-8859-1"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:components="components.*"
		 creationComplete="creationCompleteHandler(event)"
		 >
	<mx:Script>
		<![CDATA[
			import model.Catalogo;
			import model.Constants;
			import model.DatosGeneralesProyecto;
			import model.Estado;
			import model.EstadoValidacionOperativa;
			import model.Producto;
			import model.TipoEntregable;
			import model.Util;
			import model.ValidacionProyecto;
			
			import mx.collections.ArrayCollection;
			import mx.com.gahm.componentes.validadores.InicializaValidadoresEtiquetas;
			import mx.com.gahm.componentes.validadores.ValidadorCadenaCualquierCaracter;
			import mx.com.gahm.componentes.validadores.ValidadorEntero;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			private var mode:String = null;
			private var _item:DatosGeneralesProyecto;
			private var validators:InicializaValidadoresEtiquetas;
			
			public function set registrer(value:Boolean):void{
				mode = Constants.REGISTER_MODE;
				this.label = Constants.REGISTRAR;
			}
			
			public function set update(value:Boolean):void{
				mode = Constants.UPDATE_MODE;
				this.label = Constants.MODIFICAR;
			}
			
			public function set enabledComponents(value:Boolean):void{
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.modeValidation();
				this.initializeValidators();
				this.fillCombos();
			}
			
			public function set projectValidation(value:DatosGeneralesProyecto):void{
				if( value == null ){
					return;
				}
				this.cleanForm();
				this._item = value;
				this.setItem(); 
			}
			
			private function setItem():void
			{
				if( this._item == null ){
					return;
				}
				this.txtConectelID.text = Util.getIDConectelFormat( Util.extractObject( this._item, "proyecto.id" ) );
				this.txtCategory.text = Util.extractToText( this._item, "proyecto.categoria.etiqueta" );
				this.txtClient.text  = Util.extractToText( this._item, "proyecto.producto.cliente.nombreComercial" );
				this.txtProjectType.text = Util.extractToText( this._item, "proyecto.producto.tipoProyecto" );
				this.txtTechnology.text = Util.extractToText( this._item, "proyecto.producto.teconologia" );
				this.txtEquipment.text = Util.extractToText( this._item, "proyecto.producto.equipo" );
				this.txtActivity.text = Util.extractToText( this._item, "proyecto.producto.actividadRealizar" );
				this.txtModel.text = Util.extractToText( this._item, "proyecto.producto.modelo" );
				this.txtServiceDescription.text = Util.extractToText( this._item, "proyecto.producto.descripcionServicio" );
				this.txtServiceType.text = Util.extractToText( this._item, "proyecto.tipoServicio.tipo" );
				var costo:String = "costo";
				if( this.txtServiceType.text == Producto.TIPO_SERVICIO_LOCAL ){
					costo = "proyecto.producto.costoLocalCliente";	
				}
				if( this.txtServiceType.text == Producto.TIPO_SERVICIO_FORANEO ){
					costo = "proyecto.producto.costoForaneoCliente";	
				}				
				//this.txtCost.text = Util.formatNumber( Util.extractObject( this._item, costo) );
				this.txtSite.text = Util.extractToText( this._item, "proyecto.centralSitio");
				this.txtParentProject.text = Util.extractToText( this._item, "proyecto.proyectoPadreHijo.proyectoPadre.descripcion");
				this.txtCordinationResponsible.text = Util.extractToText( this._item, "reponsableConectel.nombreCompleto");
				this.txtImplementationResponsible.text = Util.extractToText( this._item, "responsableImpl.nombreCompleto");
				this.txtClientResponsible.text = Util.extractToText( this._item, "responsableCliente");
				this.txtRealStartDate.text = Util.formatDateToString( this._item.fechaInicioReal );
				this.txtRealEndDate.text = Util.formatDateToString( this._item.fechaTerminoReal );
				this.txtFinalClient.text = Util.extractToText( this._item, "clienteFinal");
				if( this._item.proyecto != null && 
					this._item.proyecto.validacionProyecto != null ){
					if( Util.isFill( this.cmbOperationalValidationStatus ) && this._item.proyecto.validacionProyecto != null 
						&& this._item.proyecto.validacionProyecto.estadoValidacionOperativa != null ){
						this.cmbOperationalValidationStatus.selectedIndex = Util.selectedIndexFromCombo( this.cmbOperationalValidationStatus.dataProvider as ArrayCollection, 
							this._item.proyecto.validacionProyecto.estadoValidacionOperativa.id);
						this.dtfOperativeValidationStatus.selectedDate = this._item.proyecto.validacionProyecto.fecha;
					}
				}
			}
			
			private function getProjectValidation():ValidacionProyecto{
				var projectValidation:ValidacionProyecto = null;
				projectValidation = new ValidacionProyecto();
				if( this._item.proyecto != null && 
					this._item.proyecto.validacionProyecto != null ){
					projectValidation.id = this._item.proyecto.validacionProyecto.id;
				}
				projectValidation.proyecto = this._item.proyecto;
				projectValidation.estadoValidacionOperativa = Util.validateCombo( this.cmbOperationalValidationStatus ) as EstadoValidacionOperativa;
				projectValidation.fecha = this.dtfOperativeValidationStatus.selectedDate;
				return projectValidation;
			}
			
			private function fillCombos():void
			{
				this.responseGetEstadoValidacionOperativa.token = this.catalogoService.getEstadoValidacionOperativa();
			}
			
			
			protected function datosGeneralesProyectoService_faultHandler(event:FaultEvent):void
			{
				Util.showErrorMessage( Util.splitException( event.fault.faultString ) );
			}
			
			protected function btnAccept_clickHandler(event:MouseEvent):void
			{
				if( !this.validations() ){
					Util.showMessageVerifyFields();
					return;
				}
				if( this.mode == Constants.UPDATE_MODE ){
					Alert.show("Confirme si desea actualizar el elemento.","Advertencia",Alert.YES+Alert.NO,this, updateItem);
				}
			}
			
			private function updateItem(event:CloseEvent):void{
				if( event.detail == Alert.NO ){
					return;
				}
				var item:ValidacionProyecto = this.getProjectValidation();
				Util.showProperties( item );
				this.responseUpdate.token = this.validacionProyectoService.update( item );
			}
			
			private function validations():Boolean
			{
				var value:Boolean = true;
				value &&= this.validators.validarFormulario();
				/* value &&= this.dlvEngineeringDeliverable.existElements(); */
				return value;
			}
			
			private function modeValidation():void
			{
				if( this.mode == Constants.REGISTER_MODE ){
				}
				if( this.mode == Constants.UPDATE_MODE ){
				}
			}
			
			private function initializeValidators():void
			{
				this.validators = new InicializaValidadoresEtiquetas();
			}
			
			protected function responseSave_resultHandler(event:ResultEvent):void
			{
				var eventGeneralDataProjectNew:Event = new Event("projectValidationNew");
				this.dispatchEvent( eventGeneralDataProjectNew );
				this.cleanForm();
			}
			
			private function cleanForm():void
			{
				this.txtConectelID.reset();
				this.txtCategory.reset();
				this.txtClient.reset();
				this.txtProjectType.reset();
				this.txtTechnology.reset();
				this.txtEquipment.reset();
				this.txtActivity.reset();
				this.txtModel.reset();
				this.txtServiceDescription.reset();
				this.txtServiceType.reset();
				//this.txtCost.reset();
				this.txtSite.reset();
				this.txtParentProject.reset();
				this.txtCordinationResponsible.reset();
				this.txtImplementationResponsible.reset();
				this.txtClientResponsible.reset();
				this.txtRealStartDate.reset();
				this.txtRealEndDate.reset();
				this.txtFinalClient.reset();
				this.cmbOperationalValidationStatus.selectedIndex = 0; 
				this.dtfOperativeValidationStatus.reset();
			}
			
			protected function responseUpdate_resultHandler(event:ResultEvent):void
			{
				var eventGeneralDataProjectUpdated:Event = new Event("projectValidationUpdated");
				this.dispatchEvent( eventGeneralDataProjectUpdated );
				this.cleanForm();
			}
			
			protected function responseGetEstadoValidacionOperativa_resultHandler(event:ResultEvent):void
			{
				var data:ArrayCollection = event.result as ArrayCollection;
				if( data == null ){
					return;
				}
				this.cmbOperationalValidationStatus.dataProvider = data;
				if( Util.isFill( this.cmbOperationalValidationStatus ) && this._item 
					&& this._item.proyecto.validacionProyecto != null 
					&& this._item.proyecto.validacionProyecto.estadoValidacionOperativa != null ){
					this.cmbOperationalValidationStatus.selectedIndex = Util.selectedIndexFromCombo( this.cmbOperationalValidationStatus.dataProvider as ArrayCollection, 
						this._item.proyecto.validacionProyecto.estadoValidacionOperativa.id);
				}
			}
			
		]]>
	</mx:Script>
	<mx:Metadata>
		[Event(name="projectValidationNew", type="flash.events.Event")]
		[Event(name="projectValidationUpdated", type="flash.events.Event")]
		[Event(name="projectValidationProjectDone", type="flash.events.Event")]
	</mx:Metadata>
	<mx:Form id="form">
		<mx:FormItem label="ID Conectel:" direction="horizontal">
			<components:TextInput id="txtConectelID" width="150" textAlign="right"
								  editable="false"/>
		</mx:FormItem>
		<mx:FormItem label="Categoría:">
			<components:TextInput id="txtCategory" width="400"
								  editable="false"/>
		</mx:FormItem>
		<mx:FormItem label="Cliente:">
			<components:TextInput id="txtClient" width="400"
								  editable="false"/>
		</mx:FormItem>
		<mx:FormItem label="Tipo de Proyecto:">
			<components:TextInput id="txtProjectType" width="300"
								  editable="false"/>
		</mx:FormItem>
		<mx:FormItem label="Tecnología:">
			<components:TextInput id="txtTechnology" width="250"
								  editable="false"/>
		</mx:FormItem>
		<mx:FormItem label="Equipo:">
			<components:TextInput id="txtEquipment" width="300"
								  editable="false"/>
		</mx:FormItem>
		<mx:FormItem label="Actividad a Realizar:">
			<components:TextInput id="txtActivity" width="500"
								  editable="false"/>
		</mx:FormItem>
		<mx:FormItem label="Modelo:">
			<components:TextInput id="txtModel" width="250"
								  editable="false"/>
		</mx:FormItem>
		<mx:FormItem label="Descripción del Servicio:">
			<components:TextInput id="txtServiceDescription" width="500"
								  editable="false"/>
		</mx:FormItem>
		<mx:FormItem label="Tipo de Servicio:">
			<components:TextInput id="txtServiceType" width="250"
								  editable="false"/>
		</mx:FormItem>
		<mx:FormItem label="Central o Sitio:">
			<components:TextInput id="txtSite" width="350"
								  editable="false"/>
		</mx:FormItem>
		<mx:FormItem label="Proyecto Padre:">
			<components:TextInput id="txtParentProject" width="450"
								  editable="false"/>
		</mx:FormItem>
		<mx:FormItem label="Responsable Coordinación:">
			<components:TextInput id="txtCordinationResponsible" width="350"
								  editable="false"/>
		</mx:FormItem>
		<mx:FormItem label="Responsable Implementación:">
			<components:TextInput id="txtImplementationResponsible" width="350"
								  editable="false"/>
		</mx:FormItem>
		<mx:FormItem label="Responsable Cliente:">
			<components:TextInput id="txtClientResponsible" width="350"
								  editable="false"/>
		</mx:FormItem>
		<mx:FormItem label="Fecha Inicio Real:">
			<components:TextInput id="txtRealStartDate"  width="100"
								  editable="false"/>
		</mx:FormItem>
		<mx:FormItem label="Fecha Termino Real:">
			<components:TextInput id="txtRealEndDate"  width="100"
								  editable="false"/>
		</mx:FormItem>
		<mx:FormItem label="Cliente Final:">
			<components:TextInput id="txtFinalClient" width="350"
								  editable="false"/>
		</mx:FormItem>
		<mx:FormItem label="Estatus de Validación Operativa:">
			<mx:ComboBox id="cmbOperationalValidationStatus" width="400"
						 labelField="etiqueta"/>
		</mx:FormItem>
		<mx:FormItem label="Fecha de Estatus de Validación Operativa:">
			<components:DateField id="dtfOperativeValidationStatus"/>
		</mx:FormItem>
		<mx:FormItem direction="horizontal">
			<mx:Button id="btnAccept" label="Aceptar" click="btnAccept_clickHandler(event)"/>
		</mx:FormItem>
	</mx:Form>
	<mx:RemoteObject id="validacionProyectoService" destination="validacionProyectoService" fault="datosGeneralesProyectoService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:CallResponder id="responseUpdate" result="responseUpdate_resultHandler(event)"/>
	<mx:RemoteObject id="catalogoService" destination="catalogoService" fault="datosGeneralesProyectoService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:CallResponder id="responseGetEstadoValidacionOperativa" result="responseGetEstadoValidacionOperativa_resultHandler(event)"/>
</mx:VBox>
