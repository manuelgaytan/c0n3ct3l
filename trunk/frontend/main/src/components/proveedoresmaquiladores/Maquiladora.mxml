<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:components="components.*"
		 creationComplete="creationCompleteHandler(event)"
		 >
	<mx:Script>
		<![CDATA[
			import model.Catalogo;
			import model.Colaborador;
			import model.Constants;
			import model.DatoBancario;
			import model.DocumentoLiderProveedorMaquilador;
			import model.EstatusC;
			import model.GrupoFamiliaD;
			import model.Perfil;
			import model.ProveedorMaquilador;
			import model.TipoAlmacen;
			import model.TipoContrato;
			import model.TipoMantenimiento;
			import model.UbicacionC;
			import model.UnidadB;
			import model.Util;
			
			import mx.collections.ArrayCollection;
			import mx.com.gahm.componentes.validadores.InicializaValidadoresEtiquetas;
			import mx.com.gahm.componentes.validadores.ValidadorAlfabetico;
			import mx.com.gahm.componentes.validadores.ValidadorAlfanumerico;
			import mx.com.gahm.componentes.validadores.ValidadorDecimal;
			import mx.com.gahm.componentes.validadores.ValidadorNumerico;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.object_proxy;
			
			private var mode:String = null;
			private var _item:ProveedorMaquilador;
			private var validators:InicializaValidadoresEtiquetas;
			
			public function set registrer(value:Boolean):void{
				mode = Constants.REGISTER_MODE;
				this.label = Constants.REGISTRAR;
			}
			
			public function set update(value:Boolean):void{
				mode = Constants.UPDATE_MODE;
				this.label = Constants.MODIFICAR;
			}
			
			public function set enabledComponents(value:Boolean):void{
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.modeValidation();
				this.initializeValidators();
				this.fillCombos();
			}
			
			public function set proveedor(value:ProveedorMaquilador):void{
				if( value == null ){
					return;
				}
				this.cleanForm();
				this._item = value;
				this.setProveedor(); 
			}
			
			private function setProveedor():void
			{
				if( this._item == null ){
					return;
				}
				provider.proveedorMaquiladorForm=_item;
				this.txtBanco.text= this._item.datoBancario.banco;
				this.txtCLBInterbancaria.text = this._item.datoBancario.clabeInterbancaria;
				this.txtCuenta.text = this._item.datoBancario.cuentaBancaria;
				this.txtNSS.text= _item.nss;
				this.txtCURP.text= this._item.curp;
				if( Util.isFill( this.cmbTipoContrato ) && this._item.tipoContrato != null ){
					this.cmbTipoContrato.selectedIndex = Util.selectedIndexFromCombo( this.cmbTipoContrato.dataProvider as ArrayCollection, 
						this._item.tipoContrato.id);
				}
				this.dtfFechaContrato.selectedDate = this._item.fechaContrato;
				this.fltDlvLeaderDocuments.delivers = this.convertDocumentLeaderToList( this._item.documentosLiderProveedorMaquilador );				
			}
			
			private function getProveedor():ProveedorMaquilador{
				var item:ProveedorMaquilador = null;
				if( this.mode == Constants.REGISTER_MODE ){
					item = new ProveedorMaquilador();
				}else{
					item = this._item;
				}
				item=this.provider.getProveedorMaquilador();
				/* item.formaPago = new FormaPago();
				item.formaPago.id = ((this.cmbFormaPago.selectedItem as FormaPago).id); */
				item.datoBancario = new DatoBancario();
				item.datoBancario.banco= Util.validateEmpty(txtBanco.text);
				item.datoBancario.clabeInterbancaria= Util.validateEmpty(txtCLBInterbancaria.text);
				item.datoBancario.cuentaBancaria= Util.validateEmpty(txtCuenta.text);
				item.nss=Util.validateEmpty(txtNSS.text);
				item.curp=Util.validateEmpty(txtCURP.text);
				item.tipoContrato= new TipoContrato;
				item.tipoContrato.id = ((this.cmbTipoContrato.selectedItem as TipoContrato).id); 
				item.fechaContrato= this.dtfFechaContrato.selectedDate;
				item.documentosLiderProveedorMaquilador = this.convertDocumentLeader( this.fltDlvLeaderDocuments.delivers );
				return item;
			}
			
			private function fillCombos():void
			{
				provider.fillCombos();
				this.responseGetGrupoFamiliaD.token = this.catalogoService.getGrupoFamiliaD();
				this.responseGetUnidadB.token = this.catalogoService.getUnidadB();
				this.responseGetUbicacionC.token = this.catalogoService.getUbicacionC();
				this.responseGetTipoContrato.token = this.catalogoService.getTipoContrato();
			}
			
			protected function responseGetGrupoFamiliaD_resultHandler(event:ResultEvent):void
			{
				var data:ArrayCollection = event.result as ArrayCollection;
				if( data == null ){
					return;
				}
				/* this.cmbFamily.dataProvider = Util.addEmptyCatalgo( data );
				if( this._item != null && this._item.grupoFamiliaD != null ){
					this.cmbFamily.selectedIndex = Util.selectedIndexFromCombo( this.cmbFamily.dataProvider as ArrayCollection, 
						this._item.grupoFamiliaD.id);
				} */
			}
			
			protected function consumibleService_faultHandler(event:FaultEvent):void
			{
				Util.showErrorMessage( Util.splitException( event.fault.faultString ) );
			}
			
			protected function btnAccept_clickHandler(event:MouseEvent):void
			{
				if( !this.validations() ){
					Util.showMessageVerifyFields();
					return;
				}
				if( this.mode == Constants.REGISTER_MODE ){
					var proveedor:ProveedorMaquilador = this.getProveedor();
					Util.showProperties( proveedor );
					this.responseSave.token = this.proveedorMaquiladorRO.saveProveedorMaquilador( proveedor );
				}
				if( this.mode == Constants.UPDATE_MODE ){
					Alert.show("Confirme si desea actualizar el elemento.","Advertencia",Alert.YES+Alert.NO,this, updateItem);
				}
			}
			
			private function updateItem(event:CloseEvent):void{
				if( event.detail == Alert.NO ){
					return;
				}
				var proveedor:ProveedorMaquilador = this.getProveedor();
				Util.showProperties( proveedor );
				this.responseUpdate.token = this.proveedorMaquiladorRO.updateProveedorMaquilador( proveedor );
			}
			
			private function validations():Boolean
			{
				var value:Boolean = true;
				value &&= this.provider.validations();
				value &&= this.validators.validarFormulario();
				return value;
			}
			
			private function modeValidation():void
			{
			}
			
			private function initializeValidators():void
			{
				this.validators = new InicializaValidadoresEtiquetas();
				validators.crearValidadorRestrictor("generic",ValidadorAlfanumerico.nombre, 0, 255, true);
				validators.crearValidadorRestrictor("number",ValidadorDecimal.nombre, 10, 4);
			}
			
			protected function responseSave_resultHandler(event:ResultEvent):void
			{
				var eventProveedorNew:Event = new Event("proveedorNew");
				this.dispatchEvent( eventProveedorNew );
				this.cleanForm();
			}
			
			private function cleanForm():void
			{
				/* this.cmbFamily.selectedIndex = 0;
				this.cmbUnit.selectedIndex = 0;
				this.cmbLocation.selectedIndex = 0; */
			}
			
			protected function responseUpdate_resultHandler(event:ResultEvent):void
			{
				var eventProveedorUpdated:Event = new Event("proveedorUpdated");
				this.dispatchEvent( eventProveedorUpdated );
				this.cleanForm();
			}
			
			protected function responseGetUnidadB_resultHandler(event:ResultEvent):void
			{
				var data:ArrayCollection = event.result as ArrayCollection;
				if( data == null ){
					return;
				}
				/* this.cmbUnit.dataProvider = Util.addEmptyCatalgo( data );
				if( this._item != null && this._item.unidadB != null ){
					this.cmbUnit.selectedIndex = Util.selectedIndexFromCombo( this.cmbUnit.dataProvider as ArrayCollection, 
						this._item.unidadB.id);
				} */
			}
			
			protected function responseGetUbicacionC_resultHandler(event:ResultEvent):void
			{
				var data:ArrayCollection = event.result as ArrayCollection;
				if( data == null ){
					return;
				}
				/* this.cmbLocation.dataProvider = Util.addEmptyCatalgo( data );
				if( this._item != null && this._item.ubicacionC != null ){
					this.cmbLocation.selectedIndex = Util.selectedIndexFromCombo( this.cmbLocation.dataProvider as ArrayCollection, 
						this._item.ubicacionC.id);
				} */
			}
			
			protected function catalogoService_faultHandler(event:FaultEvent):void
			{
				Util.showErrorMessage( Util.splitException( event.fault.faultString ) );
			}
			
			protected function provider_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				provider.mode=this.mode;
			}
			
			protected function responseGetTipoContrato_resultHandler(event:ResultEvent):void
			{
				var data:ArrayCollection = event.result as ArrayCollection;
				if( data == null ){
					return;
				}
				this.cmbTipoContrato.dataProvider = Util.addEmptyCatalgo( data, "tipo" );
				if( this._item != null && this._item.tipoContrato != null ){
					this.cmbTipoContrato.selectedIndex = Util.selectedIndexFromCombo( this.cmbTipoContrato.dataProvider as ArrayCollection, 
						this._item.tipoContrato.id);
				} 
				
			}
			
			private function convertDocumentLeader(documentosLiderProveedorMaquilador:ArrayCollection):ArrayCollection
			{
				if( documentosLiderProveedorMaquilador == null ||
					documentosLiderProveedorMaquilador.length == 0 ){
					return null;
				}
				var documentsConverted:ArrayCollection = new ArrayCollection();
				var document:DocumentoLiderProveedorMaquilador;
				for each (var documento:String in documentosLiderProveedorMaquilador) 
				{
					document = new DocumentoLiderProveedorMaquilador();
					document.documento = documento;
					documentsConverted.addItem( document );
				}				
				return documentsConverted;
			}
			
			private function convertDocumentLeaderToList(documentosLiderProveedorMaquilador:ArrayCollection):ArrayCollection
			{
				if( documentosLiderProveedorMaquilador == null ||
					documentosLiderProveedorMaquilador.length == 0 ){
					return null;
				}
				var documentsConverted:ArrayCollection = new ArrayCollection();
				var document:String;
				for each (var documento:DocumentoLiderProveedorMaquilador in documentosLiderProveedorMaquilador) 
				{
					document = documento.documento;
					documentsConverted.addItem( document );
				}				
				return documentsConverted;
			}
			
		]]>
	</mx:Script>
	<mx:Metadata>
		[Event(name="proveedorNew", type="flash.events.Event")]
		[Event(name="proveedorUpdated", type="flash.events.Event")]
	</mx:Metadata>
	<mx:Form id="form">
		<components:Provider limitedInformation="false" creationComplete="provider_creationCompleteHandler(event)" id="provider"/>
		<!--<mx:FormItem label="Forma de Pago:">
			<mx:ComboBox id="cmbFormaPago"
						 labelField="forma"
						 />
		</mx:FormItem>-->
		<mx:FormItem label="Cuenta Bancaria:">
			<components:TextInput id="txtCuenta"
								  />
		</mx:FormItem>
		<mx:FormItem label="Banco:">
			<components:TextInput id="txtBanco"
								   width="300"/>
		</mx:FormItem>
		<mx:FormItem label="CLABE Interbancaria:">
			<components:TextInput id="txtCLBInterbancaria"
								  />
		</mx:FormItem>
		<mx:FormItem label="NSS:">
			<components:TextInput id="txtNSS"
								  />
		</mx:FormItem>
		<mx:FormItem label="C.U.R.P.:">
			<components:TextInput id="txtCURP"
								  />
		</mx:FormItem>
		<!--<mx:FormItem label="Tecnología:">
			<mx:ComboBox id="cmbTecnologia"
						 labelField="etiqueta"
						 />
		</mx:FormItem>-->
		<mx:FormItem label="Tipo de Contrato:">
			<mx:ComboBox id="cmbTipoContrato"
						 labelField="tipo"
						 />
		</mx:FormItem>
		<mx:FormItem label="Fecha de Contrato:">
			<components:DateField id="dtfFechaContrato" />
		</mx:FormItem>
		<mx:FormItem label="Documentos de Líder:">
			<components:FlatDeliver id="fltDlvLeaderDocuments"/>
		</mx:FormItem>
		<mx:FormItem>
			<mx:Button id="btnAccept" label="Aceptar" click="btnAccept_clickHandler(event)"/>
		</mx:FormItem>
	</mx:Form>
	<mx:RemoteObject id="proveedorMaquiladorRO" destination="proveedorMaquiladorService" fault="consumibleService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:CallResponder id="responseSave" result="responseSave_resultHandler(event)"/>
	<mx:CallResponder id="responseUpdate" result="responseUpdate_resultHandler(event)"/>
	<mx:RemoteObject id="catalogoService" destination="catalogoService" fault="catalogoService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:CallResponder id="responseGetGrupoFamiliaD" result="responseGetGrupoFamiliaD_resultHandler(event)"/>
	<mx:CallResponder id="responseGetUnidadB" result="responseGetUnidadB_resultHandler(event)"/>
	<mx:CallResponder id="responseGetUbicacionC" result="responseGetUbicacionC_resultHandler(event)"/>
	<mx:CallResponder id="responseGetTipoContrato" result="responseGetTipoContrato_resultHandler(event)" />
</mx:VBox>
