<?xml version="1.0" encoding="ISO-8859-1"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:components="components.*"
		 creationComplete="creationCompleteHandler(event)" xmlns:requisicionescompra="components.requisicionescompra.*"
		 >
	<mx:Script>
		<![CDATA[
			import model.Catalogo;
			import model.Colaborador;
			import model.Constants;
			import model.Cotizacion;
			import model.EstatusC;
			import model.GrupoFamiliaD;
			import model.OrdenCompraAlmacen;
			import model.PartidaRequisicionCompra;
			import model.Perfil;
			import model.ProveedorCalificado;
			import model.ProveedorCalificadoCombo;
			import model.Proyecto;
			import model.RequisicionCompra;
			import model.TipoAlmacen;
			import model.TipoMantenimiento;
			import model.UbicacionC;
			import model.UnidadB;
			import model.UnidadOrdenCompra;
			import model.Util;
			
			import mx.collections.ArrayCollection;
			import mx.com.gahm.componentes.validadores.Constantes;
			import mx.com.gahm.componentes.validadores.InicializaValidadoresEtiquetas;
			import mx.com.gahm.componentes.validadores.ValidadorCadenaCualquierCaracter;
			import mx.com.gahm.componentes.validadores.ValidadorDecimal;
			import mx.com.gahm.componentes.validadores.ValidadorEntero;
			import mx.com.gahm.componentes.validadores.ValidadorNumerico;
			import mx.controls.Alert;
			import mx.controls.List;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.object_proxy;
			
			private var mode:String = null;
			private var _item:OrdenCompraAlmacen;
			private var validators:InicializaValidadoresEtiquetas;
			
			public var IVApercent:Number = Constants.IVA;
			
			public function set registrer(value:Boolean):void{
				mode = Constants.REGISTER_MODE;
				this.label = Constants.REGISTRAR;
			}
			
			public function set update(value:Boolean):void{
				mode = Constants.UPDATE_MODE;
				this.label = Constants.MODIFICAR;
			}
			
			public function set enabledComponents(value:Boolean):void{
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.modeValidation();
				this.initializeValidators();
				this.fillCombos();
			}
			
			public function set purchaseOrder(value:OrdenCompraAlmacen):void{
				if( value == null ){
					return;
				}
				this.cleanForm();
				this._item = value;
				this.setPurchaseOrder(); 
			}
			
			private function setPurchaseOrder():void
			{
				if( this._item == null ){
					return;
				}
				this.txtID.text = Util.numberToString( this._item.id );
				this.txtProjectID.text = Util.numberToString( this._item.proyecto.id );
				if( !(this._item.requisicionCompra == null) ){
					this.txtRequisicionID.text = Util.numberToString( this._item.requisicionCompra.id );
					this.txtRequisicionID.dispatchEvent( new FocusEvent(FocusEvent.FOCUS_OUT) );
				}
				if( !(this._item.cotizacion == null) ){
					this.txtQuotationID.text = Util.numberToString( this._item.cotizacion.id );
				}
				this.dtfDate.selectedDate = this._item.fecha;
				if( Util.isFill( this.cmbQualifiedSupplier ) && this._item.proveedorCalificado != null ){
					this.cmbQualifiedSupplier.selectedIndex = Util.selectedIndexFromCombo( this.cmbQualifiedSupplier.dataProvider as ArrayCollection, 
						this._item.proveedorCalificado.id);
					this.cmbQualifiedSupplier.dispatchEvent( new ListEvent(ListEvent.CHANGE) );
				}
				this.txtSubtotal.text = Util.numberToString( this._item.subtotal );
				this.txtIVA.text = Util.numberToString( this._item.iva );
				this.txtIEPS.text = Util.numberToString( this._item.ieps );
				this.txtISRRetention.text = Util.numberToString( this._item.retencionIsr );
				this.txtIVARetention.text = Util.numberToString( this._item.retencionIva );
				this.txtOtherTaxes.text = Util.numberToString( this._item.otrosImpuestos );
				this.txtTotal.text = Util.numberToString( this._item.total );
				this.dtfWarehouseDeliveryDate.selectedDate = this._item.fechaEntregaAlmacen;
				this.txtLegend.text = this._item.leyenda;
				this.txtAmountWithLetter.text = this._item.importeLetra;
			}
			
			private function setQualifiedSupplier( supplier:ProveedorCalificado ):void{
				if( supplier == null ){
					return;
				}
				this.txtBusinessName.text = supplier.proveedorSeleccionado.proveedor.razonSocial;
				this.txtRFC.text = supplier.proveedorSeleccionado.proveedor.rfc;
				this.txtTaxAddress.text = supplier.proveedorSeleccionado.proveedor.direccionFiscal;
				this.txtPhones.text = supplier.proveedorSeleccionado.proveedor.telefonos;
				this.txtContact.text = supplier.proveedorSeleccionado.proveedor.contacto;
				this.txtMail.text = supplier.proveedorSeleccionado.proveedor.correo;
				this.txtWebPage.text = supplier.proveedorSeleccionado.proveedor.paginaWeb;
				this.txtPaymentMethod.text = supplier.formaPago.forma;
				this.txtPaymentType.text = supplier.tipoPago.tipo;
				this.txtCurrency.text = supplier.moneda;
				this.txtCreditLimit.text = Util.numberToString( supplier.limiteCredito );
				this.txtCreditDays.text = Util.numberToString( supplier.diasCredito );
				this.txtDiscount.text = Util.numberToString( supplier.descuentos );
			}
			
			private function getPurchaseOrder():OrdenCompraAlmacen{
				var item:OrdenCompraAlmacen = null;
				if( this.mode == Constants.REGISTER_MODE ){
					item = new OrdenCompraAlmacen();
				}else{
					item = this._item;
				}
				item.proyecto = new Proyecto();
				item.proyecto.id = Util.stringToNumber( this.txtProjectID.text );
				if( !(Util.validateEmpty( this.txtRequisicionID.text ) == null) ){ 
					item.requisicionCompra = new RequisicionCompra();
					item.requisicionCompra.id = Util.stringToNumber( this.txtRequisicionID.text );
					item.requisicionCompra.partidasRequisicionCompra = this.itemsManagement.dataProvider as ArrayCollection;
				}else{
					item.requisicionCompra = null;
				}
				if( !(Util.validateEmpty( this.txtQuotationID.text ) == null) ){
					item.cotizacion = new Cotizacion();
					item.cotizacion.id = Util.stringToNumber( this.txtQuotationID.text );
				}else{
					item.cotizacion = null;
				}
				item.fecha = this.dtfDate.selectedDate;
				item.proveedorCalificado = new ProveedorCalificado(); 
				item.proveedorCalificado.id = (Util.validateCombo( this.cmbQualifiedSupplier ) as ProveedorCalificadoCombo).id;
				item.subtotal = Util.stringToNumber( this.txtSubtotal.text );
				item.iva = Util.stringToNumber( this.txtIVA.text );
				item.ieps = Util.stringToNumber( this.txtIEPS.text );
				item.retencionIsr = Util.stringToNumber( this.txtISRRetention.text );
				item.retencionIva = Util.stringToNumber( this.txtIVARetention.text );
				item.otrosImpuestos = Util.stringToNumber( this.txtOtherTaxes.text );
				item.total = Util.stringToNumber( this.txtTotal.text );
				item.fechaEntregaAlmacen = this.dtfDate.selectedDate;
				item.leyenda = Util.validateEmpty( this.txtLegend.text );
				item.importeLetra = Util.validateEmpty( this.txtAmountWithLetter.text );
				return item;
			}
			
			private function fillCombos():void
			{
				this.responseGetProveedoresCalificados.token = this.proveedorCalificadoService.getProveedoresCalificadosCombo();
			}
			
			protected function ordenCompraService_faultHandler(event:FaultEvent):void
			{
				Util.showErrorMessage( Util.splitException( event.fault.faultString ) );
			}
			
			protected function btnAccept_clickHandler(event:MouseEvent):void
			{
				if( !this.validations() ){
					Util.showMessageVerifyFields();
					return;
				}
				if( this.mode == Constants.REGISTER_MODE ){
					var purchaseOrder:OrdenCompraAlmacen = this.getPurchaseOrder();
					Util.showProperties( purchaseOrder );
					this.responseSave.token = this.ordenCompraService.save( purchaseOrder );
				}
				if( this.mode == Constants.UPDATE_MODE ){
					Alert.show("Confirme si desea actualizar el elemento.","Advertencia",Alert.YES+Alert.NO,this, updateItem);
				}
			}
			
			private function updateItem(event:CloseEvent):void{
				if( event.detail == Alert.NO ){
					return;
				}
				var purchaseOrder:OrdenCompraAlmacen = this.getPurchaseOrder();
				Util.showProperties( purchaseOrder );
				this.responseUpdate.token = this.ordenCompraService.update( purchaseOrder );
			}
			
			private function validations():Boolean
			{
				var value:Boolean = true;
				value &&= this.validators.validarFormulario();
				value &&= Util.listBaseSelected( this.cmbQualifiedSupplier );
				value &&= this.dtfDate.selectedDate != null;
				value &&= this.dtfWarehouseDeliveryDate.selectedDate != null;
				return value;
			}
			
			private function modeValidation():void
			{
				if( this.mode == Constants.REGISTER_MODE ){
					form.removeChild( this.frmID );
				}
			}
			
			private function initializeValidators():void
			{
				this.validators = new InicializaValidadoresEtiquetas();
				this.validators.crearValidadorRestrictor("generic",ValidadorCadenaCualquierCaracter.nombre, 0, 255);
				this.validators.setRestrictor( this.txtLegend, "generic");
				this.validators.setRestrictor( this.txtAmountWithLetter, "generic");
				/*
				validators.crearValidadorRestrictor("generic",ValidadorCadenaCualquierCaracter.nombre, 0, 255);
				validators.setRestrictor(txtCode, "generic");
				validators.setRestrictor(txtDescription, "generic");
				*/
				validators.crearValidadorRestrictor("number",ValidadorDecimal.nombre, 9, 2);
				validators.setValidador(txtSubtotal, "number");
				validators.setValidador(txtIVA, "number");
				validators.setRestrictor(txtIEPS, "number");
				validators.setRestrictor(txtISRRetention, "number");
				validators.setRestrictor(txtIVARetention, "number");
				validators.setRestrictor(txtOtherTaxes, "number");
				validators.setValidador(txtTotal, "number");
				
				validators.crearValidadorRestrictor("id",ValidadorEntero.nombre, 11);
				validators.setValidador(txtProjectID, "id");
				validators.setRestrictor(txtRequisicionID, "id");
				validators.setRestrictor(txtQuotationID, "id");
			}
			
			protected function responseSave_resultHandler(event:ResultEvent):void
			{
				var eventPurchaseOrderNew:Event = new Event("purchaseOrderNew");
				this.dispatchEvent( eventPurchaseOrderNew );
				this.cleanForm();
			}
			
			private function cleanForm():void
			{
				Util.upScroll( this );
				this.txtID.reset();
				this.txtProjectID.reset();
				this.txtRequisicionID.reset();
				this.txtQuotationID.reset();
				this.dtfDate.selectedDate = new Date();
				this.cmbQualifiedSupplier.selectedIndex = 0; 
				this.txtSubtotal.reset();
				this.txtIVA.reset();
				this.compIVA.reset();
				this.txtIEPS.reset();
				this.txtISRRetention.reset();
				this.txtIVARetention.reset();
				this.txtOtherTaxes.reset();
				this.txtTotal.reset();
				this.dtfWarehouseDeliveryDate.reset();
				this.txtLegend.reset();
				this.txtAmountWithLetter.reset();
				this.cleanFormQualifiedSupplier();
			}
			
			private function cleanFormQualifiedSupplier():void{
				this.txtBusinessName.reset();
				this.txtRFC.reset();
				this.txtTaxAddress.reset();
				this.txtPhones.reset();
				this.txtContact.reset();
				this.txtMail.reset();
				this.txtWebPage.reset();
				this.txtPaymentMethod.reset();
				this.txtPaymentType.reset();
				this.txtCurrency.reset();
				this.txtCreditLimit.reset();
				this.txtCreditDays.reset();
				this.txtDiscount.reset();
			}
			
			protected function responseUpdate_resultHandler(event:ResultEvent):void
			{
				var eventPurchaseOrderUpdated:Event = new Event("purchaseOrderUpdated");
				this.dispatchEvent( eventPurchaseOrderUpdated );
				this.cleanForm();
			}
			
			protected function responseGetProveedoresCalificados_resultHandler(event:ResultEvent):void
			{
				var data:ArrayCollection = event.result as ArrayCollection;
				if( data == null ){
					return;
				}
				this.cmbQualifiedSupplier.dataProvider = Util.addEmptyCatalgo( data );
				if( this._item != null && this._item.proveedorCalificado != null ){
					this.cmbQualifiedSupplier.selectedIndex = Util.selectedIndexFromCombo( this.cmbQualifiedSupplier.dataProvider as ArrayCollection, 
						this._item.proveedorCalificado.id);
					this.cmbQualifiedSupplier.dispatchEvent( new Event(Event.CHANGE) );
				}
			}
			
			protected function catalogoService_faultHandler(event:FaultEvent):void
			{
				Util.showErrorMessage( Util.splitException( event.fault.faultString ) );
			}
			
			protected function cmbQualifiedSupplier_changeHandler(event:ListEvent):void
			{
				var idSupplier:* = Util.selectedId( this.cmbQualifiedSupplier );
				if( idSupplier == undefined ){
					this.cleanFormQualifiedSupplier();
					return;
				}
				this.responseGetProveedorCalificado.token = this.proveedorCalificadoService.getProveedorCalificado(idSupplier);
			}
			
			protected function responseGetProveedorCalificado_resultHandler(event:ResultEvent):void
			{
				if( event == null ||
					event.result == null ||
					!(event.result is ProveedorCalificado) ){
					return;
				}
				this.setQualifiedSupplier( event.result as ProveedorCalificado );
			}
			
			protected function txtRequisicionID_enterHandler():void
			{
				this.itemsManagement.reset();
				var idRequisicion:* = Util.stringToNumber(this.txtRequisicionID.text);
				if( idRequisicion == undefined ){
					return;
				}
				this.responseGetRequisicionCompra.token = this.requisicionCompraService.getItem(idRequisicion);
			}
			
			protected function txtRequisicionID_focusOutHandler():void
			{
				this.txtRequisicionID_enterHandler();
			}
			
			protected function responseGetRequisicionCompra_resultHandler(event:ResultEvent):void
			{
				if( event != null &&
					event.result != null ){
					itemsManagement.dataProvider = event.result.partidasRequisicionCompra;
				}
			}
			
			protected function btnUpdate_clickHandler(event:MouseEvent = null):void
			{
				var datas:ArrayCollection = this.itemsManagement.dataProvider as ArrayCollection;
				var subtotal:Number = 0;
				for each (var i:PartidaRequisicionCompra in datas) 
				{
					i.importe = Util.stringToNumber(i.cantidad) * i.costo;
					if( i.importe != undefined ){
						subtotal += i.importe;
					}
				}
				this.txtSubtotal.text = Util.truncateToString(subtotal);
				this.txtIVA.text = Util.truncateToString(subtotal*IVApercent);
				this.txtTotal.text = Util.truncateToString(subtotal*IVApercent+subtotal);
			}
			
			private function sum():void{
				var total:Number = 0;
				total += Util.stringToNumber( this.txtSubtotal.text, true );
				total += Util.stringToNumber( this.txtIVA.text, true );
				total += Util.stringToNumber( this.txtIEPS.text, true );
				total -= Util.stringToNumber( this.txtISRRetention.text, true );
				total -= Util.stringToNumber( this.txtIVARetention.text, true );
				total += Util.stringToNumber( this.txtOtherTaxes.text, true );
				this.txtTotal.text = Util.truncateToString( total );
			}
		]]>
	</mx:Script>
	<mx:Metadata>
		[Event(name="purchaseOrderNew", type="flash.events.Event")]
		[Event(name="purchaseOrderUpdated", type="flash.events.Event")]
	</mx:Metadata>
	<mx:Form id="form">
		<mx:FormItem required="true" label="ID:" id="frmID">
			<components:TextInput id="txtID" textAlign="right" editable="false"/>
		</mx:FormItem>
		<mx:FormItem required="true" label="ID Proyecto:" direction="horizontal">
			<components:TextInput id="txtProjectID" textAlign="right"/>
			<!--<mx:Button label="Ver Proyecto" id="btnProjectID"/>-->
		</mx:FormItem>
		<mx:FormItem label="ID Requisición:" direction="horizontal">
			<components:TextInput id="txtRequisicionID" textAlign="right"
								  enter="txtRequisicionID_enterHandler()"
								  focusOut="txtRequisicionID_focusOutHandler()"/>
			<!--<mx:Button label="Ver Requisición" id="btnRequisicionID"/>-->
		</mx:FormItem>
		<mx:FormItem label="ID Cotización:" direction="horizontal">
			<components:TextInput id="txtQuotationID" textAlign="right"/>
			<!--<mx:Button label="Ver Cotización" id="btnQuotationID"/>-->
		</mx:FormItem>
		<mx:FormItem required="true" label="Fecha:">
			<components:DateField id="dtfDate" enabled="false" creationComplete="dtfDate.selectedDate = new Date()"/>
		</mx:FormItem>
		<mx:FormItem required="true" label="Proveedor Calificado:">
			<!--<components:ComboList id="cmbQualifiedSupplier"/>-->
			<mx:ComboBox id="cmbQualifiedSupplier" labelField="etiqueta"
						 change="cmbQualifiedSupplier_changeHandler(event)"/>
		</mx:FormItem>
		<!-- Campos de Seleccion Automatica por el Proveedor Calificado -->
		<mx:FormItem label="Razón Social:">
			<components:TextInput id="txtBusinessName" editable="false" width="400"/>
		</mx:FormItem>
		<mx:FormItem label="R.F.C.:">
			<components:TextInput id="txtRFC" editable="false"/>
		</mx:FormItem>
		<mx:FormItem label="Dirección Fiscal:">
			<components:TextInput id="txtTaxAddress" editable="false" width="400"/>
		</mx:FormItem>
		<mx:FormItem label="Teléfonos:">
			<components:TextInput id="txtPhones" editable="false" width="300"/>
		</mx:FormItem>
		<mx:FormItem label="Contacto:">
			<components:TextInput id="txtContact" editable="false" width="400"/>
		</mx:FormItem>
		<mx:FormItem label="Correo Electrónico:">
			<components:TextInput id="txtMail" editable="false" width="300"/>
		</mx:FormItem>
		<mx:FormItem label="Página Web:">
			<components:TextInput id="txtWebPage" editable="false" width="200"/>
		</mx:FormItem>
		<mx:FormItem label="Forma de Pago:">
			<components:TextInput id="txtPaymentMethod" editable="false" width="200"/>
		</mx:FormItem>
		<mx:FormItem label="Tipo de Pago:">
			<components:TextInput id="txtPaymentType" editable="false" width="200"/>
		</mx:FormItem>
		<mx:FormItem label="Moneda:">
			<components:TextInput id="txtCurrency" editable="false" width="200"/>
		</mx:FormItem>
		<mx:FormItem label="Límite de Crédito:">
			<components:TextInput id="txtCreditLimit" editable="false" textAlign="right" width="200"/>
		</mx:FormItem>
		<mx:FormItem label="Días de Crédito:">
			<components:TextInput id="txtCreditDays" editable="false" textAlign="right" width="80"/>
		</mx:FormItem>
		<mx:FormItem label="Descuento:">
			<components:TextInput id="txtDiscount" editable="false" textAlign="right" width="80"/>
		</mx:FormItem>
		<!-- Fin Campos de Seleccion Automatica por el Proveedor Calificado -->
		<mx:VBox>
			<requisicionescompra:ItemsManagement id="itemsManagement" purchaseOrderMode="true"/>
			<mx:Button id="btnUpdate" label="Actualiazar" click="btnUpdate_clickHandler(event)"/>
		</mx:VBox>
		<mx:FormItem required="true" label="Subtotal:">
			<components:TextInput id="txtSubtotal" textAlign="right" width="110"
								  focusOut="this.sum()" enter="this.sum()"/>
		</mx:FormItem>
		<mx:FormItem required="true" label="I.V.A.:" direction="horizontal">
			<components:TextInput id="txtIVA" textAlign="right" width="110"
								  focusOut="this.sum()" enter="this.sum()"/>
			<components:TextInputIVA id="compIVA" view="{this}" calculate="{btnUpdate_clickHandler}"/>
		</mx:FormItem>
		<mx:FormItem label="I.E.P.S.:">
			<components:TextInput id="txtIEPS" textAlign="right" width="110"
								  focusOut="this.sum()" enter="this.sum()"/>
		</mx:FormItem>
		<mx:FormItem label="Retención I.S.R.:">
			<components:TextInput id="txtISRRetention" textAlign="right" width="110"
								  focusOut="this.sum()" enter="this.sum()"/>
		</mx:FormItem>
		<mx:FormItem label="Retención I.V.A.:">
			<components:TextInput id="txtIVARetention" textAlign="right" width="110"
								  focusOut="this.sum()" enter="this.sum()"/>
		</mx:FormItem>
		<mx:FormItem label="Otros Impuestos:">
			<components:TextInput id="txtOtherTaxes" textAlign="right" width="110"
								  focusOut="this.sum()" enter="this.sum()"/>
		</mx:FormItem>
		<mx:FormItem required="true" label="Total:">
			<components:TextInput id="txtTotal" textAlign="right" width="110"/>
		</mx:FormItem>
		<mx:FormItem label="Importe con Letra:">
			<components:TextArea id="txtAmountWithLetter" width="450"/>
		</mx:FormItem>
		<mx:FormItem required="true" label="Fecha de Entrega Almacén:">
			<components:DateField id="dtfWarehouseDeliveryDate" textAlign="right"/>
		</mx:FormItem>
		<mx:FormItem label="Leyenda:">
			<components:TextArea id="txtLegend" width="600"/>
		</mx:FormItem>
		<mx:FormItem>
			<mx:Button id="btnAccept" label="Aceptar" click="btnAccept_clickHandler(event)"/>
		</mx:FormItem>
	</mx:Form>
	<mx:RemoteObject id="ordenCompraService" destination="ordenCompraService" fault="ordenCompraService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:CallResponder id="responseSave" result="responseSave_resultHandler(event)"/>
	<mx:CallResponder id="responseUpdate" result="responseUpdate_resultHandler(event)"/>
	<mx:RemoteObject id="catalogoService" destination="catalogoService" fault="catalogoService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:RemoteObject id="proveedorCalificadoService" destination="proveedorCalificadoService" fault="catalogoService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:CallResponder id="responseGetProveedoresCalificados" result="responseGetProveedoresCalificados_resultHandler(event)"/>
	<mx:CallResponder id="responseGetProveedorCalificado" result="responseGetProveedorCalificado_resultHandler(event)"/>
	<mx:RemoteObject id="requisicionCompraService" destination="requisicionCompraService" fault="ordenCompraService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:CallResponder id="responseGetRequisicionCompra" result="responseGetRequisicionCompra_resultHandler(event)"/>
</mx:VBox>
