<?xml version="1.0" encoding="utf-8"?>
<mx:Form xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns:components="components.*"
		 creationComplete="creationCompleteHandler(event)">
	<mx:Script>
		<![CDATA[
			import model.Constants;
			import model.Consumible;
			import model.GrupoFamiliaD;
			import model.Proveedor;
			import model.ProveedorMaquilador;
			import model.ProveedorSeleccionado;
			import model.TipoAlmacen;
			import model.TipoPersona;
			import model.Util;
			
			import modules.ProveedoresMaquiladores;
			
			import mx.collections.ArrayCollection;
			import mx.com.gahm.componentes.validadores.InicializaValidadoresEtiquetas;
			import mx.com.gahm.componentes.validadores.ValidadorAlfabetico;
			import mx.com.gahm.componentes.validadores.ValidadorAlfanumerico;
			import mx.com.gahm.componentes.validadores.ValidadorDecimal;
			import mx.com.gahm.componentes.validadores.ValidadorEmail;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			private var _item:ProveedorSeleccionado;
			private var _itemMaquilado:ProveedorMaquilador;
			private var validators:InicializaValidadoresEtiquetas;
			public var mode:String = null;
			
			[Bindable]
			public var limitedInformation:Boolean = true;
			
			private function initializeValidators():void
			{
				this.validators = new InicializaValidadoresEtiquetas();
				validators.crearValidadorRestrictor("generic",ValidadorAlfanumerico.nombre, 0, 255, true);
				validators.setValidador(txtNombreComercial, "generic");
				validators.setValidador(txtRazonSocial, "generic");
				validators.setValidador(txtRFC, "generic");
				validators.setValidador(txtDireccionFisica, "generic");
				validators.setValidador(txtDireccionFiscal, "generic");
				validators.setValidador(txtTelefonos, "generic");
				validators.setRestrictor(txtContacto, "generic");
				validators.crearValidadorRestrictor("email",ValidadorEmail.nombre);
				validators.setRestrictor(txtCorreo, "email");
				validators.crearValidadorRestrictor("webpage",ValidadorAlfabetico.nombre, 0, 50);
				validators.setRestrictor(txtPaginaWeb, "webpage");
			}
			
			public function validations():Boolean
			{
				var value:Boolean = true;
				value &&= this.validators.validarFormulario();
				return value;
			}
			
			public function set proveedorSeleccionadoForm(value:ProveedorSeleccionado):void{
				if( value == null ){
					return;
				}
				this._item = value;
				this.setProveedorSeleccionado(); 
			}
			
			public function set proveedorMaquiladorForm(value:ProveedorMaquilador):void{
				if( value == null ){
					return;
				}
				this._itemMaquilado = value;
				this.setProveedorMaquilador(); 
			}
			
			private function setProveedorSeleccionado():void
			{
				if( this._item == null ){
					return;
				}
				this.txtNombreComercial.text= this._item.proveedor.nombreComercial;
				this.txtRazonSocial.text= this._item.proveedor.razonSocial;
				this.txtRFC.text= this._item.proveedor.rfc;
				this.txtDireccionFisica.text= this._item.proveedor.direccionFisica;
				this.txtDireccionFiscal.text= this._item.proveedor.direccionFiscal;
				this.txtTelefonos.text= this._item.proveedor.telefonos;
				this.txtContacto.text= this._item.proveedor.contacto;
				this.txtCorreo.text= this._item.proveedor.correo;
				this.txtPaginaWeb.text= this._item.proveedor.paginaWeb;
				if( Util.isFill( this.cmbPersona ) && this._item.proveedor.tipoPersona != null ){
					this.cmbPersona.selectedIndex = Util.selectedIndexFromCombo( this.cmbPersona.dataProvider as ArrayCollection, 
						this._item.proveedor.tipoPersona.id);
				}
				/*
				this.txtDescription.text = this._item.descripcion;
				this.txtExistence.text = Util.numberToString( this._item.existencia ); */
			}
			
			private function setProveedorMaquilador():void
			{
				if( this._itemMaquilado == null ){
					return;
				}
				this.txtNombreComercial.text= this._itemMaquilado.proveedor.nombreComercial;
				this.txtRazonSocial.text= this._itemMaquilado.proveedor.razonSocial;
				this.txtRFC.text= this._itemMaquilado.proveedor.rfc;
				this.txtDireccionFisica.text= this._itemMaquilado.proveedor.direccionFisica;
				this.txtDireccionFiscal.text= this._itemMaquilado.proveedor.direccionFiscal;
				this.txtTelefonos.text= this._itemMaquilado.proveedor.telefonos;
				//this.txtContacto.text= this._itemMaquilado.contacto;
				 this.txtCorreo.text= this._itemMaquilado.proveedor.correo;
				//this.txtPaginaWeb.text= this._itemMaquilado.paginaWeb; */
				if( Util.isFill( this.cmbPersona ) && this._itemMaquilado.proveedor.tipoPersona != null ){
					this.cmbPersona.selectedIndex = Util.selectedIndexFromCombo( this.cmbPersona.dataProvider as ArrayCollection, 
						this._itemMaquilado.proveedor.tipoPersona.id);
				}
				/*
				this.txtDescription.text = this._item.descripcion;
				this.txtExistence.text = Util.numberToString( this._item.existencia ); */
			}
			
			public function getProveedorSeleccionado():ProveedorSeleccionado{
				var item:ProveedorSeleccionado = null;
				if( this.mode == Constants.REGISTER_MODE ){
					item = new ProveedorSeleccionado();
				}else{
					item = this._item;
				}
				item.proveedor = new Proveedor();
				item.proveedor.tipoPersona = new TipoPersona();
				item.proveedor.tipoPersona.id = (this.cmbPersona.selectedItem as TipoPersona).id;
			    item.proveedor.nombreComercial =	Util.validateEmpty(this.txtNombreComercial.text);
				item.proveedor.razonSocial = Util.validateEmpty(this.txtRazonSocial.text);
				item.proveedor.rfc = Util.validateEmpty(this.txtRFC.text);
				item.proveedor.direccionFisica = Util.validateEmpty(this.txtDireccionFisica.text);
				item.proveedor.direccionFiscal = Util.validateEmpty(this.txtDireccionFiscal.text);
				item.proveedor.telefonos = Util.validateEmpty(this.txtTelefonos.text);
				item.proveedor.contacto = Util.validateEmpty(this.txtContacto.text);
				item.proveedor.correo = Util.validateEmpty(this.txtCorreo.text);
				item.proveedor.paginaWeb = Util.validateEmpty(this.txtPaginaWeb.text);
				return item;
			}
			
			public function getProveedorMaquilador():ProveedorMaquilador{
				var item:ProveedorMaquilador = null;
				if( this.mode == Constants.REGISTER_MODE ){
					item = new ProveedorMaquilador();
				}else{
					item = this._itemMaquilado;
				}
				item.proveedor = new Proveedor();
				item.proveedor.tipoPersona= new TipoPersona();
				item.proveedor.tipoPersona.id= (this.cmbPersona.selectedItem as TipoPersona).id;
				item.proveedor.nombreComercial=	Util.validateEmpty(this.txtNombreComercial.text);
				item.proveedor.razonSocial= Util.validateEmpty(this.txtRazonSocial.text);
				item.proveedor.rfc=  Util.validateEmpty(this.txtRFC.text);
				item.proveedor.direccionFisica= Util.validateEmpty(this.txtDireccionFisica.text);
				item.proveedor.direccionFiscal= Util.validateEmpty(this.txtDireccionFiscal.text);
				item.proveedor.telefonos=Util.validateEmpty(this.txtTelefonos.text);
				//item.contacto=Util.validateEmpty(this.txtContacto.text);
				 item.proveedor.correo=Util.validateEmpty(this.txtCorreo.text);
			//	item.paginaWeb=Util.validateEmpty(this.txtPaginaWeb.text); */
				return item;
			}
			
			 protected function responseGetTipoPersona_resultHandler(event:ResultEvent):void
			{
				var data:ArrayCollection = event.result as ArrayCollection;
				if( data == null ){
					return;
				}
				this.cmbPersona.dataProvider = Util.addEmptyCatalgo( data, "tipo" );
				/* if( this._item != null && this._item.tipoPersona != null ){
					this.cmbPersona.selectedIndex = Util.selectedIndexFromCombo( this.cmbPersona.dataProvider as ArrayCollection, 
						this._item.tipoPersona.id);
				} */
			} 
			
			public function cleanForm():void
			{
				/* this.txtCode.reset();
				this.cmbFamily.selectedIndex = 0;
				this.txtDescription.reset();
				this.txtExistence.reset(); */
				this.txtNombreComercial.reset()
				this.txtRazonSocial.reset();
				this.txtRFC.reset()
				this.txtDireccionFisica.reset()
				this.txtDireccionFiscal.reset()
				this.txtTelefonos.reset()
				//this.txtContacto.text= this._itemMaquilado.contacto;
				this.txtCorreo.reset()
				//this.txtPaginaWeb.text= this._itemMaquilado.paginaWeb; */
				this.cmbPersona.selectedIndex = 0
					if(limitedInformation==true){
						this.txtContacto.reset();
						this.txtPaginaWeb.reset();
					}
			}
			public function fillCombos():void
				
			{
				this.responseGetTipoPersona.token = this.catalogoService.getTipoPersona()
				//this.responseGetTipoPersona.token = this.catalogoService.getGrupoFamiliaD();
			}
			
			protected function catalogoService_faultHandler(event:FaultEvent):void
			{
				Util.showErrorMessage( Util.splitException( event.fault.faultString ) );
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				if( !this.limitedInformation ){
					this.removeChild( this.frmItmContact );
					this.removeChild( this.frmItmWebPage );
				}
				this.initializeValidators();
			}
			
		]]>
	</mx:Script>
	<mx:FormItem label="Persona:">
		<mx:ComboBox id="cmbPersona"
					 labelField="tipo"
					 />
	</mx:FormItem>
	<mx:FormItem label="Nombre Comercial:">
		<components:TextInput id="txtNombreComercial" width="400"/>
	</mx:FormItem>
	<mx:FormItem label="Razón Social:">
		<components:TextInput id="txtRazonSocial" width="400"/>
	</mx:FormItem>
	<mx:FormItem label="R.F.C.:">
		<components:TextInput id="txtRFC" width="120"
							  />
	</mx:FormItem>
	<mx:FormItem label="Dirección Física:">
		<components:TextInput id="txtDireccionFisica"
							  width="500"/>
	</mx:FormItem>
	<mx:FormItem label="Dirección Fiscal:">
		<components:TextInput id="txtDireccionFiscal"
							  width="500"/>
	</mx:FormItem>
	<mx:FormItem label="Teléfonos:">
		<components:TextInput id="txtTelefonos"
							  width="240"/>
	</mx:FormItem>
	<mx:FormItem id="frmItmContact" label="Contacto:">
		<components:TextInput id="txtContacto"
							  width="400"/>
	</mx:FormItem>
	<mx:FormItem label="Correo:">
		<components:TextInput id="txtCorreo" upperCase="false"
							  width="300"/>
	</mx:FormItem>
	<mx:FormItem id="frmItmWebPage" label="Página Web:">
		<components:TextInput id="txtPaginaWeb" upperCase="false"
							  width="300"/>
	</mx:FormItem>
	<mx:RemoteObject id="catalogoService" destination="catalogoService" fault="catalogoService_faultHandler(event)"
					 showBusyCursor="true"/>
	<!--<mx:CallResponder id="responseGetGrupoFamiliaD" result="responseGetGrupoFamiliaD_resultHandler(event)"/>-->
	<mx:CallResponder id="responseGetTipoPersona" result="responseGetTipoPersona_resultHandler(event)"/>
</mx:Form>
