<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:components="components.*"
		 creationComplete="creationCompleteHandler(event)"
		 >
	<mx:Script>
		<![CDATA[
			import events.GenericEvent;
			
			import model.Catalogo;
			import model.Constants;
			import model.FacturaPorPagar;
			import model.OrdenCompraAlmacen;
			import model.OrdenCompraMaquilado;
			import model.Util;
			
			import mx.collections.ArrayCollection;
			import mx.com.gahm.componentes.validadores.InicializaValidadoresEtiquetas;
			import mx.com.gahm.componentes.validadores.ValidadorAlfabetico;
			import mx.com.gahm.componentes.validadores.ValidadorAlfanumerico;
			import mx.com.gahm.componentes.validadores.ValidadorDecimal;
			import mx.com.gahm.componentes.validadores.ValidadorEntero;
			import mx.com.gahm.componentes.validadores.ValidadorNumerico;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.object_proxy;
			
			private var mode:String = null;
			private var _item:FacturaPorPagar;
			private var validators:InicializaValidadoresEtiquetas;
			
			private static const ID_ODC_ALMACEN:int = 1;
			private static const ID_ODC_SERVICIO:int = 2;
			private static const ODC_ALMACEN:String = "Orden de Compra Álmacen";
			private static const ODC_SERVICIO:String = "Orden de Compra Servicio Maquilado";
			
			private static function getDataProviderODC():ArrayCollection{
				var catalago:Catalogo = null;
				var data:ArrayCollection = new ArrayCollection();
				catalago = new Catalogo();
				catalago.id = ID_ODC_ALMACEN;
				catalago.etiqueta = ODC_ALMACEN;
				data.addItem( catalago );
				catalago = new Catalogo();
				catalago.id = ID_ODC_SERVICIO;
				catalago.etiqueta = ODC_SERVICIO;
				data.addItem( catalago );
				return Util.addEmptyCatalgo(data);
			}
			
			public function set registrer(value:Boolean):void{
				mode = Constants.REGISTER_MODE;
				this.label = Constants.REGISTRAR;
			}
			
			public function set update(value:Boolean):void{
				mode = Constants.UPDATE_MODE;
				this.label = Constants.MODIFICAR;
			}
			
			public function set enabledComponents(value:Boolean):void{
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.modeValidation();
				this.initializeValidators();
				this.fillCombos();
			}
			
			public function set payableInvoice(value:FacturaPorPagar):void{
				if( value == null ){
					return;
				}
				this.cleanForm();
				this._item = value;
				this.setPayableInvoice(); 
			}
			
			private function setPayableInvoice():void
			{
				if( this._item == null ){
					return;
				}
				this.txtID.text = String(this._item.id);
				var purchaseOrderNumber:String;
				var maquiladoraService:Boolean;
				var supplier:String = null;
				var subtotal:String;
				var iva:String;
				var ieps:String;
				var isrRet:String;
				var ivaRet:String;
				var otherTaxes:String;
				var total:String;
				if( !(this._item.ordenCompra == null) ){
					purchaseOrderNumber = String( this._item.ordenCompra.id );
					maquiladoraService = false;
					supplier = Util.extractToText( this._item, "ordenCompra.proveedorCalificado.proveedorSeleccionado.proveedor.nombreComercial" );
					subtotal = Util.extractToText( this._item, "ordenCompra.subtotal" );
					iva = Util.extractToText( this._item, "ordenCompra.iva" );
					ieps = Util.extractToText( this._item, "ordenCompra.ieps" );
					isrRet = Util.extractToText( this._item, "ordenCompra.retencionIsr" );
					ivaRet = Util.extractToText( this._item, "ordenCompra.retencionIva" );
					otherTaxes = Util.extractToText( this._item, "ordenCompra.otrosImpuestos" );
					total = Util.extractToText( this._item, "ordenCompra.total" );
				}
				if( !(this._item.ordenCompraMaquilado == null) ){
					purchaseOrderNumber = String( this._item.ordenCompraMaquilado.id );
					maquiladoraService = true;
					supplier = Util.extractToText(this._item, "ordenCompraMaquilado.proveedorMaquilador.proveedor.razonSocial" );
					supplier = Util.extractToText( this._item, "ordenCompraMaquilado.proveedorMaquilador.proveedor.nombreComercial" );
					subtotal = Util.extractToText( this._item, "ordenCompraMaquilado.subtotalCalculado" );
					iva = Util.extractToText( this._item, "ordenCompraMaquilado.ivaCalculado" );
					ieps = Util.extractToText( this._item, "" );
					isrRet = Util.extractToText( this._item, "" );
					ivaRet = Util.extractToText( this._item, "" );
					otherTaxes = Util.extractToText( this._item, "" );
					total = Util.extractToText( this._item, "ordenCompraMaquilado.totalCalculado" );
				}
				if( Util.isFill( this.cmbPurchaseOrderType )  ){
					var purchaseOrderType:Number = maquiladoraService == false ? ID_ODC_ALMACEN : ID_ODC_SERVICIO;
					this.cmbPurchaseOrderType.selectedIndex = Util.selectedIndexFromCombo( this.cmbPurchaseOrderType.dataProvider as ArrayCollection, purchaseOrderType);  
				}
				var arrayPurchaseOrder:Array = null;
				if( maquiladoraService ){
					arrayPurchaseOrder = [this._item.ordenCompraMaquilado];
				}else{
					arrayPurchaseOrder = [this._item.ordenCompra];
				}
				this.dtgPurchaseOrder.dataProvider = arrayPurchaseOrder;
				this.lblSupplier.text = supplier;
				this.txtFolio.text = this._item.folio;
				this.dtfDate.selectedDate = this._item.fecha;
				this.lblSubtotal.text = Util.formatCurrency(subtotal);
				this.lblIVA.text = Util.formatCurrency(iva);
				this.lblIEPS.text = Util.formatCurrency(ieps);
				this.lblISRRetention.text = Util.formatCurrency(isrRet);
				this.lblIVARetention.text = Util.formatCurrency(ivaRet);
				this.lblOtherTaxes.text = Util.formatCurrency(otherTaxes);
				this.lblTotal.text = Util.formatCurrency(total);
				this.dtfPaymentDate.selectedDate = this._item.fechaPago;
			}
			
			private function getPayableInvoice():FacturaPorPagar{
				var item:FacturaPorPagar = null;
				if( this.mode == Constants.REGISTER_MODE ){
					item = new FacturaPorPagar();
					var purchaseOrderType:* = Util.selectedId(this.cmbPurchaseOrderType);
					if( purchaseOrderType == ID_ODC_ALMACEN ){
						item.ordenCompra = this.dtgPurchaseOrder.selectedItem as OrdenCompraAlmacen;
					}
					if( purchaseOrderType == ID_ODC_SERVICIO ){
						item.ordenCompraMaquilado = this.dtgPurchaseOrder.selectedItem as OrdenCompraMaquilado;
					}
				}else{
					item = this._item;
				}
				item.folio = Util.validateEmpty( this.txtFolio.text );
				item.fecha = this.dtfDate.selectedDate;
				item.fechaPago = this.dtfPaymentDate.selectedDate;
				return item;
			}
			
			private function fillCombos():void
			{
			}
			
			protected function facturaPorPagarService_faultHandler(event:FaultEvent):void
			{
				Util.showErrorMessage( Util.splitException( event.fault.faultString ) );
			}
			
			protected function btnAccept_clickHandler(event:MouseEvent):void
			{
				if( !this.validations() ){
					Util.showMessageVerifyFields();
					return;
				}
				if( this.mode == Constants.REGISTER_MODE ){
					var payableInvoice:FacturaPorPagar = this.getPayableInvoice();
					Util.showProperties( payableInvoice );
					this.responseSave.token = this.facturaPorPagarService.save( payableInvoice );
				}
				if( this.mode == Constants.UPDATE_MODE ){
					Alert.show("Confirme si desea actualizar el elemento.","Advertencia",Alert.YES+Alert.NO,this, updateItem);
				}
			}
			
			private function updateItem(event:CloseEvent):void{
				if( event.detail == Alert.NO ){
					return;
				}
				var payableInvoice:FacturaPorPagar = this.getPayableInvoice();
				Util.showProperties( payableInvoice );
				this.responseUpdate.token = this.facturaPorPagarService.update( payableInvoice );
			}
			
			private function validations():Boolean
			{
				var value:Boolean = true;
				value &&= this.validators.validarFormulario();
				return value;
			}
			
			private function modeValidation():void
			{
				if( this.mode == Constants.REGISTER_MODE ){
					form.removeChild( this.frmID );
				}else{
					this.cmbPurchaseOrderType.enabled = false;
					this.dtgPurchaseOrder.enabled = false;
					this.dtgPurchaseOrder.doubleClickEnabled = false;
				}
			}
			
			private function initializeValidators():void
			{
				this.validators = new InicializaValidadoresEtiquetas();
			}
			
			protected function responseSave_resultHandler(event:ResultEvent):void
			{
				var eventPayableInvoiceNew:Event = new Event("payableInvoiceNew");
				this.dispatchEvent( eventPayableInvoiceNew );
				this.cleanForm();
			}
			
			private function cleanForm(labels:Boolean = false):void
			{
				if( !labels ){
				this.txtID.reset();
				this.cmbPurchaseOrderType.selectedIndex = 0;
				Util.removeItems(this.dtgPurchaseOrder.dataProvider);
				}
				this.lblSupplier.text = "";
				this.txtFolio.reset();
				this.dtfDate.reset();
				this.lblSubtotal.text = "";
				this.lblIVA.text = "";
				this.lblIEPS.text = "";
				this.lblISRRetention.text = "";
				this.lblIVARetention.text = "";
				this.lblOtherTaxes.text = "";
				this.lblTotal.text = "";
				this.dtfPaymentDate.reset();
			}
			
			protected function responseUpdate_resultHandler(event:ResultEvent):void
			{
				var eventPayableInvoiceUpdated:Event = new Event("payableInvoiceUpdated");
				this.dispatchEvent( eventPayableInvoiceUpdated );
				this.cleanForm();
			}
			
			protected function catalogoService_faultHandler(event:FaultEvent):void
			{
				Util.showErrorMessage( Util.splitException( event.fault.faultString ) );
			}
			
			protected function cmbPurchaseOrderType_changeHandler(event:ListEvent):void
			{
				var odcType:* = Util.selectedId(this.cmbPurchaseOrderType); 
				if( odcType == undefined ){
					this.cleanForm();
					return;
				}
				if( odcType == ID_ODC_ALMACEN ){
					responseGetAllODC.token = this.ordenCompraService.getAll();
				}else{
					responseGetAllODC.token = this.ordenCompraMaquiladoService.getAll();
				}
			}
			
			protected function responseGetAllODC_resultHandler(event:ResultEvent):void
			{
				this.dtgRequisicionID.dataField = "requisicionCompra.id";
				this.dtgPurchaseOrder.dataProvider = event.result as ArrayCollection;
			}
			
			protected function dtgPurchaseOrder_doubleClickHandler(event:MouseEvent):void
			{
				var odcType:* = Util.selectedId(this.cmbPurchaseOrderType); 
				if( odcType == undefined ||
					this.dtgPurchaseOrder.selectedItem == null ){
					this.cleanForm(true);
					return;
				}
				var purchaseOrderNumber:String;
				var maquiladoraService:Boolean;
				var supplier:String = null;
				var subtotal:String;
				var iva:String;
				var ieps:String;
				var isrRet:String;
				var ivaRet:String;
				var otherTaxes:String;
				var total:String;
				if( odcType == ID_ODC_ALMACEN ){
					maquiladoraService = false;
					var ordenCompraAlmacen:OrdenCompraAlmacen = this.dtgPurchaseOrder.selectedItem as OrdenCompraAlmacen;
					supplier = Util.extractToText( ordenCompraAlmacen, "proveedorCalificado.proveedorSeleccionado.proveedor.nombreComercial" );
					subtotal = Util.extractToText( ordenCompraAlmacen, "subtotal" );
					iva = Util.extractToText( ordenCompraAlmacen, "iva" );
					ieps = Util.extractToText( ordenCompraAlmacen, "ieps" );
					isrRet = Util.extractToText( ordenCompraAlmacen, "retencionIsr" );
					ivaRet = Util.extractToText( ordenCompraAlmacen, "retencionIva" );
					otherTaxes = Util.extractToText( ordenCompraAlmacen, "otrosImpuestos" );
					total = Util.extractToText( ordenCompraAlmacen, "total" );
				}else{
					maquiladoraService = true;
					var ordenCompraMaquilado:OrdenCompraMaquilado = this.dtgPurchaseOrder.selectedItem as OrdenCompraMaquilado;
					supplier = Util.extractToText( ordenCompraMaquilado, "proveedorMaquilador.proveedor.nombreComercial" );
					subtotal = Util.extractToText( ordenCompraMaquilado, "subtotalCalculado" );
					iva = Util.extractToText( ordenCompraMaquilado, "ivaCalculado" );
					ieps = Util.extractToText( ordenCompraMaquilado, "" );
					isrRet = Util.extractToText( ordenCompraMaquilado, "" );
					ivaRet = Util.extractToText( ordenCompraMaquilado, "" );
					otherTaxes = Util.extractToText( ordenCompraMaquilado, "" );
					total = Util.extractToText( ordenCompraMaquilado, "totalCalculado" );
				}
				this.lblSupplier.text = supplier;
				this.lblSubtotal.text = Util.formatCurrency(subtotal);
				this.lblIVA.text = Util.formatCurrency(iva);
				this.lblIEPS.text = Util.formatCurrency(ieps);
				this.lblISRRetention.text = Util.formatCurrency(isrRet);
				this.lblIVARetention.text = Util.formatCurrency(ivaRet);
				this.lblOtherTaxes.text = Util.formatCurrency(otherTaxes);
				this.lblTotal.text = Util.formatCurrency(total);
			}
			
			private function providerLabelFunction( item:Object, column:DataGridColumn ):String{
				var provider:String = "";
				if( item == null ){
					return "";
				}
				if( item is OrdenCompraMaquilado ){
					provider = (item as OrdenCompraMaquilado).proveedorMaquilador.proveedor.razonSocial;
				}
				if( item is OrdenCompraAlmacen  ){
					provider = (item as OrdenCompraAlmacen).proveedorCalificado.proveedorSeleccionado.proveedor.razonSocial;
				}
				return provider;
			}
			
			private function projectLabelFunction( item:Object, column:DataGridColumn ):String{
				var returnValue:String = "";
				if( item == null ){
					return "";
				}
				if( item is OrdenCompraMaquilado ){
					returnValue = (item as OrdenCompraMaquilado).solicitudServicioMaquilado.proyecto.id;
				}
				if( item is OrdenCompraAlmacen  ){
					returnValue = (item as OrdenCompraAlmacen).proyecto.id;
				}
				return returnValue;
			}
			
			private function requisitionLabelFunction( item:Object, column:DataGridColumn ):String{
				var returnValue:String = "";
				if( item == null ){
					return "";
				}
				if( item is OrdenCompraMaquilado ){
					returnValue = (item as OrdenCompraMaquilado).solicitudServicioMaquilado.id;
				}
				if( item is OrdenCompraAlmacen  ){
					returnValue = (item as OrdenCompraAlmacen).requisicionCompra.id;
				}
				return returnValue;
			}
		]]>
	</mx:Script>
	<mx:Metadata>
		[Event(name="payableInvoiceNew", type="flash.events.Event")]
		[Event(name="payableInvoiceUpdated", type="flash.events.Event")]
		[Event(name="seePurchaseOrdenStock", type="events.GenericEvent")]
		[Event(name="seePurchaseOrdenMaquiladoraService", type="events.GenericEvent")]
	</mx:Metadata>
	<mx:Form id="form">
		<mx:FormItem label="ID:" id="frmID">
			<components:TextInput id="txtID" textAlign="right" editable="false"/>
		</mx:FormItem>
		<mx:FormItem label="Tipo de Orden Compra:" direction="horizontal">
			<mx:ComboBox id="cmbPurchaseOrderType"
						 dataProvider="{getDataProviderODC()}"
						 change="cmbPurchaseOrderType_changeHandler(event)"
						 labelField="etiqueta"/>
		</mx:FormItem>
		<mx:DataGrid id="dtgPurchaseOrder"
					 doubleClick="dtgPurchaseOrder_doubleClickHandler(event)"
					 doubleClickEnabled="true">
			<mx:columns>
				<mx:DataGridColumn id="dtgID" headerText="ID"
								   dataField="id"
								   width="80"
								   textAlign="right"/>
				<mx:DataGridColumn id="dtgProjectID" headerText="{'ID \nProyecto'}"
								   width="80"
								   labelFunction="projectLabelFunction"
								   textAlign="right"/>
				<mx:DataGridColumn id="dtgRequisicionID" headerText="{'ID \nRequisición/\nSolicitud'}"
								   width="90"
								   labelFunction="requisitionLabelFunction"
								   textAlign="right"/>
				<mx:DataGridColumn id="dtgDate" headerText="Fecha"
								   width="80"
								   dataField="fecha"
								   labelFunction="{Util.labelFunctionDate}"
								   textAlign="center"/>
				<mx:DataGridColumn id="dtgSupplier" headerText="Proveedor"
								   width="200"
								   labelFunction="providerLabelFunction"
								   />
			</mx:columns>
		</mx:DataGrid>
		<mx:FormItem label="Proveedor:">
			<mx:Label id="lblSupplier"/>
		</mx:FormItem>
		<mx:FormItem label="Número de Folio ó Factura:">
			<components:TextInput id="txtFolio" width="150"/>
		</mx:FormItem>
		<mx:FormItem label="Fecha:">
			<components:DateField id="dtfDate"/>
		</mx:FormItem>
		<mx:FormItem label="Subtotal:">
			<mx:Label id="lblSubtotal" textAlign="right" width="200"/>
		</mx:FormItem>
		<mx:FormItem label="I.V.A.:">
			<mx:Label id="lblIVA" textAlign="right" width="200"/>
		</mx:FormItem>
		<mx:FormItem label="I.E.P.S.:">
			<mx:Label id="lblIEPS" textAlign="right" width="200"/>
		</mx:FormItem>
		<mx:FormItem label="Retención I.S.R.:">
			<mx:Label id="lblISRRetention" textAlign="right" width="200"/>
		</mx:FormItem>
		<mx:FormItem label="Retención I.V.A.:">
			<mx:Label id="lblIVARetention" textAlign="right" width="200"/>
		</mx:FormItem>
		<mx:FormItem label="Otros Impuestos:">
			<mx:Label id="lblOtherTaxes" textAlign="right" width="200"/>
		</mx:FormItem>
		<mx:FormItem label="Total:">
			<mx:Label id="lblTotal" textAlign="right" width="200"/>
		</mx:FormItem>
		<mx:FormItem label="Fecha de Pago:">
			<components:DateField id="dtfPaymentDate"/>
		</mx:FormItem>
		<mx:FormItem>
			<mx:Button id="btnAccept" label="Aceptar" click="btnAccept_clickHandler(event)"/>
		</mx:FormItem>
	</mx:Form>
	<mx:RemoteObject id="facturaPorPagarService" destination="facturaPorPagarService" fault="facturaPorPagarService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:CallResponder id="responseSave" result="responseSave_resultHandler(event)"/>
	<mx:CallResponder id="responseUpdate" result="responseUpdate_resultHandler(event)"/>
	<mx:RemoteObject id="ordenCompraService" destination="ordenCompraService" fault="facturaPorPagarService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:RemoteObject id="ordenCompraMaquiladoService" destination="ordenCompraMaquiladoService" fault="facturaPorPagarService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:CallResponder id="responseGetAllODC" result="responseGetAllODC_resultHandler(event)"/>
</mx:VBox>
	
