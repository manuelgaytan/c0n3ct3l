<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:components="components.*"
		 creationComplete="creationCompleteHandler(event)" xmlns:proyectos="components.proyectos.*"
		 >
	<mx:Script>
		<![CDATA[
			import model.Constants;
			import model.ProyectoPadre;
			import model.Util;
			
			import mx.collections.ArrayCollection;
			import mx.com.gahm.componentes.validadores.InicializaValidadoresEtiquetas;
			import mx.com.gahm.componentes.validadores.ValidadorAlfabetico;
			import mx.com.gahm.componentes.validadores.ValidadorAlfanumerico;
			import mx.com.gahm.componentes.validadores.ValidadorDecimal;
			import mx.com.gahm.componentes.validadores.ValidadorNumerico;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.object_proxy;
			
			private var mode:String = null;
			private var _item:ProyectoPadre;
			private var validators:InicializaValidadoresEtiquetas;
			
			public function set registrer(value:Boolean):void{
				mode = Constants.REGISTER_MODE;
				this.label = Constants.REGISTRAR;
			}
			
			public function set update(value:Boolean):void{
				mode = Constants.UPDATE_MODE;
				this.label = Constants.MODIFICAR;
			}
			
			public function set enabledComponents(value:Boolean):void{
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.modeValidation();
				this.initializeValidators();
				this.fillCombos();
			}
			
			public function set parentProject(value:ProyectoPadre):void{
				if( value == null ){
					return;
				}
				this._item = value;
				this.setQuote(); 
			}
			
			private function setQuote():void
			{
				if( this._item == null ){
					return;
				}
				this.txtDescription.text = this._item.descripcion;
				this.dtgProyectosAsociados.datagrid.dataProvider = this._item.proyectoPadreHijos;
			}
			
			private function getQuote():ProyectoPadre{
				var item:ProyectoPadre = null;
				if( this.mode == Constants.REGISTER_MODE ){
					item = new ProyectoPadre();
				}else{
					item = this._item;
				}
				item.descripcion = Util.validateEmpty( this.txtDescription.text );
				return item;
			}
			
			private function fillCombos():void
			{
			}
			
			protected function proyectoPadreService_faultHandler(event:FaultEvent):void
			{
				Util.showErrorMessage( Util.splitException( event.fault.faultString ) );
			}
			
			protected function btnAccept_clickHandler(event:MouseEvent):void
			{
				if( !this.validations() ){
					Util.showMessageVerifyFields();
					return;
				}
				if( this.mode == Constants.REGISTER_MODE ){
					var parentProject:ProyectoPadre = this.getQuote();
					Util.showProperties( parentProject );
					this.responseSave.token = this.proyectoPadreService.save( parentProject );
				}
				if( this.mode == Constants.UPDATE_MODE ){
					Alert.show("Confirme si desea actualizar el elemento.","Advertencia",Alert.YES+Alert.NO,this, updateItem);
				}
			}
			
			private function updateItem(event:CloseEvent):void{
				if( event.detail == Alert.NO ){
					return;
				}
				var parentProject:ProyectoPadre = this.getQuote();
				Util.showProperties( parentProject );
				this.responseUpdate.token = this.proyectoPadreService.update( parentProject );
			}
			
			private function validations():Boolean
			{
				var value:Boolean = true;
				value &&= this.validators.validarFormulario();
				return value;
			}
			
			private function modeValidation():void
			{
				if( this.mode == Constants.REGISTER_MODE ){
					form.removeChild( this.frmID );
					form.removeChild( this.frmProjectsAssociated );
				}
			}
			
			private function initializeValidators():void
			{
				this.validators = new InicializaValidadoresEtiquetas();
				validators.crearValidadorRestrictor("generic",ValidadorAlfanumerico.nombre, 0, 255, true);
				validators.setValidador(txtDescription, "generic");
			}
			
			protected function responseSave_resultHandler(event:ResultEvent):void
			{
				var eventQuoteNew:Event = new Event("parentProjectNew");
				this.dispatchEvent( eventQuoteNew );
				this.cleanForm();
			}
			
			private function cleanForm():void
			{
				this.txtID.reset();
				this.txtDescription.reset();
			}
			
			protected function responseUpdate_resultHandler(event:ResultEvent):void
			{
				var eventQuoteUpdated:Event = new Event("parentProjectUpdated");
				this.dispatchEvent( eventQuoteUpdated );
				this.cleanForm();
			}
			
			protected function catalogoService_faultHandler(event:FaultEvent):void
			{
				Util.showErrorMessage( Util.splitException( event.fault.faultString ) );
			}
			
		]]>
	</mx:Script>
	<mx:Metadata>
		[Event(name="parentProjectNew", type="flash.events.Event")]
		[Event(name="parentProjectUpdated", type="flash.events.Event")]
	</mx:Metadata>
	<mx:Form id="form">
		<mx:FormItem label="ID:" id="frmID">
			<components:TextInput id="txtID"
								  textAlign="right"
								  editable="false"/>
		</mx:FormItem>
		<mx:FormItem label="DescripciÃ³n:">
			<components:TextInput id="txtDescription" width="400"/>
		</mx:FormItem>
		<mx:FormItem label="Proyectos Asociados:" id="frmProjectsAssociated">
			<proyectos:Consult id="dtgProyectosAsociados"/>
		</mx:FormItem>
		<mx:FormItem>
			<mx:Button id="btnAccept" label="Aceptar" click="btnAccept_clickHandler(event)"/>
		</mx:FormItem>
	</mx:Form>
	<mx:RemoteObject id="proyectoPadreService" destination="proyectoPadreService" fault="proyectoPadreService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:CallResponder id="responseSave" result="responseSave_resultHandler(event)"/>
	<mx:CallResponder id="responseUpdate" result="responseUpdate_resultHandler(event)"/>
</mx:VBox>
