<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:components="components.*"
		 creationComplete="creationCompleteHandler(event)" xmlns:requisicionescompra="components.requisicionescompra.*"
		 >
	<mx:Script>
		<![CDATA[
			import components.equiposmedicion.Consult;
			import components.equipostransporte.Consult;
			import components.hardware.Consult;
			import components.herramientas.Consult;
			import components.materiales.Consult;
			import components.software.Consult;
			import components.solicitudalmacen.Consult;
			import components.telefoniamovil.Consult;
			
			import model.AreaSolicitante;
			import model.Catalogo;
			import model.Colaborador;
			import model.Constants;
			import model.EstatusRequisicionCompra;
			import model.PartidaRequisicionCompra;
			import model.Perfil;
			import model.Prioridad;
			import model.RequisicionCompra;
			import model.TipoAlmacen;
			import model.TipoMantenimiento;
			import model.Util;
			
			import modules.Almacen;
			
			import mx.collections.ArrayCollection;
			import mx.com.gahm.componentes.validadores.InicializaValidadoresEtiquetas;
			import mx.com.gahm.componentes.validadores.ValidadorAlfabetico;
			import mx.com.gahm.componentes.validadores.ValidadorAlfanumerico;
			import mx.com.gahm.componentes.validadores.ValidadorDecimal;
			import mx.com.gahm.componentes.validadores.ValidadorEntero;
			import mx.com.gahm.componentes.validadores.ValidadorNumerico;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.object_proxy;
			
			private var mode:String = null;
			private var _item:RequisicionCompra;
			private var validators:InicializaValidadoresEtiquetas;
			private var validatorsEntry:InicializaValidadoresEtiquetas;
			
			public function set registrer(value:Boolean):void{
				mode = Constants.REGISTER_MODE;
				this.label = Constants.REGISTRAR;
			}
			
			public function set update(value:Boolean):void{
				mode = Constants.UPDATE_MODE;
				this.label = Constants.MODIFICAR;
			}
			
			public function set enabledComponents(value:Boolean):void{
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.modeValidation();
				this.initializeValidators();
				this.fillCombos();
			}
			
			public function set purchaseRequisition(value:RequisicionCompra):void{
				if( value == null ){
					return;
				}
				this._item = value;
				this.setPurchaseRequisition(); 
			}
			
			private function setPurchaseRequisition():void
			{
				if( this._item == null ){
					return;
				}
				/*
				this.txtID.text = this._item.id;
				this.dtfApplicationDate.selectedDate = this._item.fechaSolicitud;
				this.txtReason.text = this._item.motivo;
				if( Util.isFill( this.cmbPriority ) && this._item.prioridad != null ){
					this.cmbPriority.selectedIndex = Util.selectedIndexFromCombo( this.cmbPriority.dataProvider as ArrayCollection, 
						this._item.prioridad.id);
				}
				
				this.cmbApplicantsNames.list = this._item.solicitantesRequisicion;
				if( Util.isFill( this.cmbApplicantArea ) && this._item.areaSolicitante != null ){
					this.cmbApplicantArea.selectedIndex = Util.selectedIndexFromCombo( this.cmbApplicantArea.dataProvider as ArrayCollection, 
						this._item.areaSolicitante.id);
				}
				this.txtSite.text = this._item.centralSitio;
				this.itemsManagement.dataProvider = this._item.partidasRequisicionCompra;
				if( Util.isFill( this.cmbStatus ) && this._item.estatusRequisicionCompra != null ){
					this.cmbStatus.selectedIndex = Util.selectedIndexFromCombo( this.cmbStatus.dataProvider as ArrayCollection, 
						this._item.estatusRequisicionCompra.id);
				}		
				this.comments.comments = this._item.comentariosRequisicion;
				*/
			}
			
			private function getPurchaseRequisition():RequisicionCompra{
				var item:RequisicionCompra = null;
				if( this.mode == Constants.REGISTER_MODE ){
					item = new RequisicionCompra();
				}else{
					item = this._item;
				}
				/*
				item.fechaSolicitud= this.dtfApplicationDate.selectedDate;
				item.motivo= Util.validateEmpty( this.txtReason.text );
				item.prioridad = Util.validateCombo( this.cmbPriority ) as Prioridad;
				item.areaSolicitante = Util.validateCombo( this.cmbApplicantArea ) as AreaSolicitante;
				item.centralSitio = Util.validateEmpty( this.txtSite.text );
				item.estatusRequisicionCompra = Util.validateCombo( this.cmbStatus ) as EstatusRequisicionCompra;
				item.solicitantesRequisicion = this.cmbApplicantsNames.list;
				item.partidasRequisicionCompra = this.itemsManagement.dataProvider as ArrayCollection;
				item.comentariosRequisicion = this.comments.comments;
				*/
				return item;
			}
			
			private function fillCombos():void
			{
				this.responseGetPrioridad.token = this.catalogoService.getPrioridad();
				this.responseGetAreaSolicitante.token = this.catalogoService.getAreaSolicitante();
				
			}
			
			protected function responseGetAllClient_resultHandler(event:ResultEvent):void
			{
				var data:ArrayCollection = event.result as ArrayCollection;
				if( data == null ){
					return;
				}
				this.cmbClient.dataProvider = data;
				if( this._item != null && this._item.prioridad != null ){
					this.cmbClient.selectedIndex = Util.selectedIndexFromCombo( this.cmbClient.dataProvider as ArrayCollection, 
						this._item.prioridad.id);
				}
			}
			
			protected function requisicionService_faultHandler(event:FaultEvent):void
			{
				Util.showErrorMessage( Util.splitException( event.fault.faultString ) );
			}
			
			protected function btnAccept_clickHandler(event:MouseEvent):void
			{
				if( !this.validations() ){
					Util.showMessageVerifyFields();
					return;
				}
				if( this.mode == Constants.REGISTER_MODE ){
					var purchaseRequisition:RequisicionCompra = this.getPurchaseRequisition();
					Util.showProperties( purchaseRequisition );
					this.responseSave.token = this.requisicionService.save( purchaseRequisition );
				}
				if( this.mode == Constants.UPDATE_MODE ){
					Alert.show("Confirme si desea actualizar el elemento.","Advertencia",Alert.YES+Alert.NO,this, updateItem);
				}
			}
			
			private function updateItem(event:CloseEvent):void{
				if( event.detail == Alert.NO ){
					return;
				}
				var purchaseRequisition:RequisicionCompra = this.getPurchaseRequisition();
				Util.showProperties( purchaseRequisition );
				this.responseUpdate.token = this.requisicionService.update( purchaseRequisition );
			}
			
			private function validations():Boolean
			{
				var value:Boolean = true;
				value &&= this.validators.validarFormulario();
				value &&= !(this.dtfPurchaseOrderDate.selectedDate == null);
				return value;
			}
			
			private function modeValidation():void
			{
				if( this.mode == Constants.REGISTER_MODE ){
					form.removeChild( this.frmID );
				}
			}
			
			private function initializeValidators():void
			{
				this.validators = new InicializaValidadoresEtiquetas();
				validators.crearValidadorRestrictor("generic",ValidadorAlfanumerico.nombre, 0, 255, true);
				validators.setValidador(txtPurchaseOrder, "generic");
				validators.setValidador(txtSite, "generic");
				validators.setRestrictor(txtRequisitionNumber, "generic");
				validators.setRestrictor(txtSite, "generic");
				validators.setRestrictor(txtSiteID, "generic");
				validators.setRestrictor(txtServiceType, "generic");
				this.validatorsEntry = new InicializaValidadoresEtiquetas();
				validatorsEntry.crearValidadorRestrictor("generic",ValidadorAlfanumerico.nombre, 0, 255, true);
				validatorsEntry.setValidador(txtCode, "generic");
				validatorsEntry.setValidador(txtDescription, "generic");
				validatorsEntry.crearValidadorRestrictor("generic",ValidadorEntero.nombre, 0, 99);
				validatorsEntry.setValidador(txtItem, "generic");
				validatorsEntry.crearValidadorRestrictor("generic",ValidadorDecimal.nombre, 9, 2);
				validatorsEntry.setValidador(txtPrice, "generic");
			}
			
			protected function responseSave_resultHandler(event:ResultEvent):void
			{
				var eventPurchaseRequisitionNew:Event = new Event("purchaseRequisitionNew");
				this.dispatchEvent( eventPurchaseRequisitionNew );
				this.cleanForm();
			}
			
			private function cleanForm():void
			{
				this.txtID.reset();
				this.cmbClient.selectedIndex = 0;
				this.txtPurchaseOrder.reset();
				this.dtfPurchaseOrderDate.reset();
				this.txtRequisitionNumber.reset();
				this.itemsManagement.reset();
				this.txtSite.reset();
				this.txtSiteID.reset();
				this.txtServiceType.reset();
				this.txtPayConditions.reset();
				this.comments.reset();
			}
			
			protected function responseUpdate_resultHandler(event:ResultEvent):void
			{
				var eventPurchaseRequisitionUpdated:Event = new Event("purchaseRequisitionUpdated");
				this.dispatchEvent( eventPurchaseRequisitionUpdated );
				this.cleanForm();
			}
			
			protected function responseGetAreaSolicitante_resultHandler(event:ResultEvent):void
			{
				var data:ArrayCollection = event.result as ArrayCollection;
				if( data == null ){
					return;
				}
				//this.cmbApplicantArea.dataProvider = data; //Util.addEmptyCatalgo( data );
			}
			
			protected function catalogoService_faultHandler(event:FaultEvent):void
			{
				Util.showErrorMessage( Util.splitException( event.fault.faultString ) );
			}
			
			protected function btnAddItem_clickHandler(event:MouseEvent):void
			{
				var entry:PartidaRequisicionCompra  = this.getValidEntry();
				if( entry == false ){
					Util.showErrorMessage("Valide los campos de la Partida");
					return;
				}
				this.itemsManagement.addItem( entry );
				this.cleanFormEntry();
			}
			
			private function getValidEntry():PartidaRequisicionCompra
			{
				var entry:PartidaRequisicionCompra = null;
				if( !this.isValidEntry() ){
					return entry;
				}
				entry = new PartidaRequisicionCompra();
				entry.codigo = Util.validateEmpty( this.txtItem.text );
				entry.grupoFamilia = Util.validateEmpty( this.txtCode.text );
				entry.descripcion = Util.validateEmpty( this.txtDescription.text );
				entry.cantidad = Util.validateEmpty( this.txtPrice.text );
				return entry;
			}
			
			private function isValidEntry():Boolean
			{
				return this.validatorsEntry.validarFormulario();
			}
			
			private function cleanFormEntry():void
			{
				this.txtItem.reset();
				this.txtCode.reset();
				this.txtDescription.reset();
				this.txtPrice.reset();
			}
		]]>
	</mx:Script>
	<mx:Metadata>
		[Event(name="purchaseRequisitionNew", type="flash.events.Event")]
		[Event(name="purchaseRequisitionUpdated", type="flash.events.Event")]
	</mx:Metadata>
	<mx:Form id="form">
		<mx:FormItem id="frmID" label="ID:">
			<components:TextInput id="txtID" editable="false"
								  textAlign="right"/>
		</mx:FormItem>
		<mx:FormItem label="Cliente:">
			<mx:ComboBox id="cmbClient"
						 labelField="etiqueta"
						 />
		</mx:FormItem>
		<mx:FormItem label="Orden de Compra:">
			<components:TextInput id="txtPurchaseOrder"
								  />
		</mx:FormItem>
		<mx:FormItem label="Fecha de Orden de Compra:">
			<components:DateField id="dtfPurchaseOrderDate" creationComplete="dtfPurchaseOrderDate.selectedDate = new Date()"/>
		</mx:FormItem>
		<mx:FormItem label="Número de Requisición:">
			<components:TextInput id="txtRequisitionNumber"
								  />
		</mx:FormItem>
		<mx:FormItem label="Ítem:">
			<components:TextInput id="txtItem"
								  width="60"
								  textAlign="right"/>
		</mx:FormItem>
		<mx:FormItem label="Código:">
			<components:TextInput id="txtCode"
								  />
		</mx:FormItem>
		<mx:FormItem label="Descripción:">
			<components:TextInput id="txtDescription"
								  width="400"
								  />
		</mx:FormItem>
		<mx:FormItem label="Precio Unitario:">
			<components:TextInput id="txtPrice"
								  textAlign="right"
								  width="90"
								  />
		</mx:FormItem>
		<mx:FormItem>
			<mx:Button id="btnAddItem" label="Agregar Partida" click="btnAddItem_clickHandler(event)"/>
		</mx:FormItem>
		<requisicionescompra:ItemsManagement id="itemsManagement"/>
		<mx:FormItem label="Sitio:">
			<components:TextInput id="txtSite"/>
		</mx:FormItem>
		<mx:FormItem label="ID Sitio:">
			<components:TextInput id="txtSiteID"
								  />
		</mx:FormItem>
		<mx:FormItem label="Local/Foráneo:">
			<components:TextInput id="txtServiceType"
								  width="120"
								  />
		</mx:FormItem>
		<mx:FormItem label="Condiciones de Pago:">
			<components:TextArea id="txtPayConditions"
								  textAlign="right"
								  width="400"
								  maxChars="255"
								  />
		</mx:FormItem>
		<components:Comments id="comments"/>
		<mx:FormItem>
			<mx:Button id="btnAccept" label="Aceptar" click="btnAccept_clickHandler(event)"/>
		</mx:FormItem>
	</mx:Form>
	<mx:RemoteObject id="requisicionService" destination="requisicionCompraService" fault="requisicionService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:CallResponder id="responseSave" result="responseSave_resultHandler(event)"/>
	<mx:CallResponder id="responseUpdate" result="responseUpdate_resultHandler(event)"/>
	<mx:RemoteObject id="catalogoService" destination="catalogoService" fault="catalogoService_faultHandler(event)"
					 showBusyCursor="true"/>
	<mx:CallResponder id="responseGetPrioridad" result="responseGetAllClient_resultHandler(event)"/>
	<mx:CallResponder id="responseGetAreaSolicitante" result="responseGetAreaSolicitante_resultHandler(event)"/>
	<mx:RemoteObject id="clientesService" destination="telefoniaMovilService" fault="requisicionService_faultHandler(event)"
					 showBusyCursor="true"/>
</mx:VBox>
